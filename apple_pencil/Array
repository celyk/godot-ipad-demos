<html>
<head>
    <title>Class Array</title>
    <style>
    :root {
        color-scheme: light dark;
        --color-background: #ffffff;
        --color-text: #333333;
        --color-link: #0366d6;
        --color-code-background: #f6f8fa;
        --color-code-text: #24292e;
        --color-aside-background: #f6f8fa;
        --color-aside-border: #dfe2e5;
        --color-header-background: #f6f8fa;
        --color-signature-background: #f1f8ff;
        --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
        --font-mono: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
        --font-size-code: 14px;
    }
    
    @media (prefers-color-scheme: dark) {
        :root {
            --color-background: #0d1117;
            --color-text: #c9d1d9;
            --color-link: #58a6ff;
            --color-code-background: #161b22;
            --color-code-text: #c9d1d9;
            --color-aside-background: #161b22;
            --color-aside-border: #30363d;
            --color-header-background: #161b22;
            --color-signature-background: #1d2d3e;
        }
    }
    
    body {
        font-family: var(--font-sans);
        line-height: 1.5;
        color: var(--color-text);
        background-color: var(--color-background);
        margin: 0;
        padding: 20px;
    }
    
    h1, h2, h3 {
        margin-top: 24px;
        margin-bottom: 16px;
        font-weight: 600;
        line-height: 1.25;
    }
    
    h1 {
        font-size: 2em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h2 {
        font-size: 1.5em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h3 {
        font-size: 1.25em;
    }
    
    a {
        color: var(--color-link);
        text-decoration: none;
    }
    
    a:hover {
        text-decoration: underline;
    }
    
    code, pre {
        font-family: var(--font-mono);
        font-size: var(--font-size-code);
    }
    
    pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 16px;
        overflow: auto;
    }
    
    pre code {
        background-color: transparent;
        padding: 0;
    }
    
    .signature {
        background-color: var(--color-signature-background);
        padding: 16px;
        border-radius: 6px;
        margin-bottom: 16px;
    }
    
    .description {
        margin-bottom: 16px;
    }
    
    aside {
        background-color: var(--color-aside-background);
        border-left: 4px solid var(--color-aside-border);
        border-radius: 3px;
        padding: 16px;
        margin-bottom: 16px;
    }
    
    aside .label {
        font-weight: 600;
        margin: 0 0 8px;
    }
    
    .member {
        margin-bottom: 24px;
    }
    
    .enumvalue {
        margin-left: 16px;
    }
    
    .deprecated, .experimental {
        font-weight: 600;
        color: #d73a49;
    }
    
    ul {
        padding-left: 24px;
    }
    
    .signature code, .member code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    .signature pre, .member pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 12px;
        margin: 0;
        overflow: auto;
    }
    
    .signature pre code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    p code, li code {
        background-color: var(--color-code-background);
        border-radius: 3px;
        padding: 2px 4px;
    }
    
    .section-divider {
        border: none;
        border-top: 2px solid var(--color-divider);
        margin: 20px 0;
    }
    </style>
</head>
<body>
<h3 class='secondary'>Class</h3>
<h1>Array</h1>
<p>
		A built-in data structure that holds a sequence of elements.
	</p>
<hr>
<h2>Description</h2>
<p></aside>

<p>An array data structure that can contain a sequence of elements of any type. Elements are accessed by a numerical index starting at 0. Negative indices are used to count from the back (-1 is the last element, -2 is the second to last, etc.).</aside>

<p><b>Example:</b></aside>

<div class='code-listing'><code><pre>
var array = ["One", 2, 3, "Four"]
print(array[0]) # One.
print(array[2]) # 3.
print(array[-1]) # Four.
array[2] = "Three"
print(array[-2]) # Three.
</pre></code></div>
<div class='code-listing'><code><pre>
var array1 = ["One", 2]
var array2 = [3, "Four"]
print(array1 + array2) # ["One", 2, 3, "Four"]
</pre></code></div>
<h2>Topics</h2>
<h3>Methods</h3>
<a id='a-all' name='all'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func all(method: <a href="godot:Callable">Callable</a>) -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Calls the provided <a href="godot:Callable"><code class='typeref'>Callable</code></a> on each element in the array and returns <code>true</code> if the <a href="godot:Callable"><code class='typeref'>Callable</code></a> returns <code>true</code> for <i>all</i> elements in the array. If the <a href="godot:Callable"><code class='typeref'>Callable</code></a> returns <code>false</code> for one array element or more, this method returns <code>false</code>.</aside>

<p>The callable's method should take one <a href="godot:Variant"><code class='typeref'>Variant</code></a> parameter (the current array element) and return a boolean value.</aside>

<div class='code-listing'><code><pre>
func _ready():
    print([6, 10, 6].all(greater_than_5))  # Prints True (3/3 elements evaluate to `true`).
    print([4, 10, 4].all(greater_than_5))  # Prints False (1/3 elements evaluate to `true`).
    print([4, 4, 4].all(greater_than_5))  # Prints False (0/3 elements evaluate to `true`).
    print([].all(greater_than_5))  # Prints True (0/0 elements evaluate to `true`).

    print([6, 10, 6].all(func(number): return number > 5))  # Prints True. Same as the first line above, but using lambda function.

func greater_than_5(number):
    return number > 5
</pre></code></div>
<p>See also <a href='#any'><code class='method'>any</code></a>, <a href='#filter'><code class='method'>filter</code></a>, <a href='#map'><code class='method'>map</code></a> and <a href='#reduce'><code class='method'>reduce</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> Unlike relying on the size of an array returned by <a href='#filter'><code class='method'>filter</code></a>, this method will return as early as possible to improve performance (especially with large arrays).</aside>

<p><aside class='note'><p class='label'>Note:</p> For an empty array, this method <a href="https://en.wikipedia.org/wiki/Vacuous_truth">always</a> returns <code>true</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-any' name='any'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func any(method: <a href="godot:Callable">Callable</a>) -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Calls the provided <a href="godot:Callable"><code class='typeref'>Callable</code></a> on each element in the array and returns <code>true</code> if the <a href="godot:Callable"><code class='typeref'>Callable</code></a> returns <code>true</code> for <i>one or more</i> elements in the array. If the <a href="godot:Callable"><code class='typeref'>Callable</code></a> returns <code>false</code> for all elements in the array, this method returns <code>false</code>.</aside>

<p>The callable's method should take one <a href="godot:Variant"><code class='typeref'>Variant</code></a> parameter (the current array element) and return a boolean value.</aside>

<div class='code-listing'><code><pre>
func _ready():
    print([6, 10, 6].any(greater_than_5))  # Prints True (3 elements evaluate to `true`).
    print([4, 10, 4].any(greater_than_5))  # Prints True (1 elements evaluate to `true`).
    print([4, 4, 4].any(greater_than_5))  # Prints False (0 elements evaluate to `true`).
    print([].any(greater_than_5))  # Prints False (0 elements evaluate to `true`).

    print([6, 10, 6].any(func(number): return number > 5))  # Prints True. Same as the first line above, but using lambda function.

func greater_than_5(number):
    return number > 5
</pre></code></div>
<p>See also <a href='#all'><code class='method'>all</code></a>, <a href='#filter'><code class='method'>filter</code></a>, <a href='#map'><code class='method'>map</code></a> and <a href='#reduce'><code class='method'>reduce</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> Unlike relying on the size of an array returned by <a href='#filter'><code class='method'>filter</code></a>, this method will return as early as possible to improve performance (especially with large arrays).</aside>

<p><aside class='note'><p class='label'>Note:</p> For an empty array, this method always returns <code>false</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-append' name='append'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func append(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Appends an element at the end of the array (alias of <a href='#push_back'><code class='method'>push_back</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-append_array' name='append_array'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func append_array(array: <a href="godot:Array">Array</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Appends another array at the end of this array.</aside>

<div class='code-listing'><code><pre>
var array1 = [1, 2, 3]
var array2 = [4, 5, 6]
array1.append_array(array2)
print(array1) # Prints [1, 2, 3, 4, 5, 6].
</pre></code></div>
<p></aside>

</div>
</div>
<a id='a-assign' name='assign'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func assign(array: <a href="godot:Array">Array</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Assigns elements of another <code class='param'>array</code> into the array. Resizes the array to match <code class='param'>array</code>. Performs type conversions if the array is typed.</aside>

<p></aside>

</div>
</div>
<a id='a-back' name='back'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func back() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the last element of the array. Prints an error and returns <code>null</code> if the array is empty.</aside>

<p><aside class='note'><p class='label'>Note:</p> Calling this function is not the same as writing <code>array[-1]</code>. If the array is empty, accessing by index will pause project execution when running from the editor.</aside>

<p></aside>

</div>
</div>
<a id='a-bsearch' name='bsearch'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func bsearch(value: <a href="godot:Variant">Variant</a>, before: <a href="godot:bool">bool</a> = true) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a <code class='param'>before</code> specifier can be passed. If <code>false</code>, the returned index comes after all existing entries of the value in the array.</aside>

<div class='code-listing'><code><pre>
var array = ["a", "b", "c", "c", "d", "e"]
print(array.bsearch("c", true))  # Prints 2, at the first matching element.
print(array.bsearch("c", false)) # Prints 4, after the last matching element, pointing to "d".
</pre></code></div>
<p><aside class='note'><p class='label'>Note:</p> Calling <a href='#bsearch'><code class='method'>bsearch</code></a> on an unsorted array results in unexpected behavior.</aside>

<p></aside>

</div>
</div>
<a id='a-bsearch_custom' name='bsearch_custom'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func bsearch_custom(value: <a href="godot:Variant">Variant</a>, func: <a href="godot:Callable">Callable</a>, before: <a href="godot:bool">bool</a> = true) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search and a custom comparison method. Optionally, a <code class='param'>before</code> specifier can be passed. If <code>false</code>, the returned index comes after all existing entries of the value in the array. The custom method receives two arguments (an element from the array and the value searched for) and must return <code>true</code> if the first argument is less than the second, and return <code>false</code> otherwise.</aside>

<p><aside class='note'><p class='label'>Note:</p> The custom method must accept the two arguments in any order, you cannot rely on that the first argument will always be from the array.</aside>

<p><aside class='note'><p class='label'>Note:</p> Calling <a href='#bsearch_custom'><code class='method'>bsearch_custom</code></a> on an unsorted array results in unexpected behavior.</aside>

<p></aside>

</div>
</div>
<a id='a-clear' name='clear'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func clear() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Clears the array. This is equivalent to using <a href='#resize'><code class='method'>resize</code></a> with a size of <code>0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-count' name='count'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func count(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the number of times an element is in the array.</aside>

<p></aside>

</div>
</div>
<a id='a-duplicate' name='duplicate'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func duplicate(deep: <a href="godot:bool">bool</a> = false) -> <a href="godot:Array">Array</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the array.</aside>

<p>If <code class='param'>deep</code> is <code>true</code>, a deep copy is performed: all nested arrays and dictionaries are duplicated and will not be shared with the original array. If <code>false</code>, a shallow copy is made and references to the original nested arrays and dictionaries are kept, so that modifying a sub-array or dictionary in the copy will also impact those referenced in the source array. Note that any <a href="godot:Object"><code class='typeref'>Object</code></a>-derived elements will be shallow copied regardless of the <code class='param'>deep</code> setting.</aside>

<p></aside>

</div>
</div>
<a id='a-erase' name='erase'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func erase(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes the first occurrence of a value from the array. If the value does not exist in the array, nothing happens. To remove an element by index, use <a href='#remove_at'><code class='method'>remove_at</code></a> instead.</aside>

<p><aside class='note'><p class='label'>Note:</p> This method acts in-place and doesn't return a modified array.</aside>

<p><aside class='note'><p class='label'>Note:</p> On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.</aside>

<p><aside class='note'><p class='label'>Note:</p> Do not erase entries while iterating over the array.</aside>

<p></aside>

</div>
</div>
<a id='a-fill' name='fill'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func fill(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Assigns the given value to all elements in the array. This can typically be used together with <a href='#resize'><code class='method'>resize</code></a> to create an array with a given size and initialized elements:</aside>

<div class='code-listing'><code><pre>
var array = []
array.resize(10)
array.fill(0) # Initialize the 10 elements to 0.
</pre></code></div>
</div>
</div>
<a id='a-filter' name='filter'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func filter(method: <a href="godot:Callable">Callable</a>) -> <a href="godot:Array">Array</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Calls the provided <a href="godot:Callable"><code class='typeref'>Callable</code></a> on each element in the array and returns a new array with the elements for which the method returned <code>true</code>.</aside>

<p>The callable's method should take one <a href="godot:Variant"><code class='typeref'>Variant</code></a> parameter (the current array element) and return a boolean value.</aside>

<div class='code-listing'><code><pre>
func _ready():
    print([1, 2, 3].filter(remove_1)) # Prints [2, 3].
    print([1, 2, 3].filter(func(number): return number != 1)) # Same as above, but using lambda function.

func remove_1(number):
    return number != 1
</pre></code></div>
<p>See also <a href='#any'><code class='method'>any</code></a>, <a href='#all'><code class='method'>all</code></a>, <a href='#map'><code class='method'>map</code></a> and <a href='#reduce'><code class='method'>reduce</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-find' name='find'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func find(what: <a href="godot:Variant">Variant</a>, from: <a href="godot:int">int</a> = 0) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Searches the array for a value and returns its index or <code>-1</code> if not found. Optionally, the initial search index can be passed.</aside>

<p></aside>

</div>
</div>
<a id='a-front' name='front'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func front() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the first element of the array. Prints an error and returns <code>null</code> if the array is empty.</aside>

<p><aside class='note'><p class='label'>Note:</p> Calling this function is not the same as writing <code>array[0]</code>. If the array is empty, accessing by index will pause project execution when running from the editor.</aside>

<p></aside>

</div>
</div>
<a id='a-get_typed_builtin' name='get_typed_builtin'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_typed_builtin() -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the built-in type of the typed array as a <a href='godot:@GlobalScope#Variant.Type'><code class='enum'>Variant.Type</code></a> constant. If the array is not typed, returns <code class='constant'><a href='#TYPE_NIL'>TYPE_NIL</a></code>.</aside>

<p></aside>

</div>
</div>
<a id='a-get_typed_class_name' name='get_typed_class_name'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_typed_class_name() -> <a href="godot:StringName">StringName</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the <b>native</b> class name of the typed array if the built-in type is <code class='constant'><a href='#TYPE_OBJECT'>TYPE_OBJECT</a></code>. Otherwise, this method returns an empty string.</aside>

<p></aside>

</div>
</div>
<a id='a-get_typed_script' name='get_typed_script'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_typed_script() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the script associated with the typed array. This method returns a <a href="godot:Script"><code class='typeref'>Script</code></a> instance or <code>null</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-has' name='has'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func has(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the array contains the given value.</aside>

<div class='code-listing'><code><pre>
print(["inside", 7].has("inside")) # True
print(["inside", 7].has("outside")) # False
print(["inside", 7].has(7)) # True
print(["inside", 7].has("7")) # False
</pre></code></div>
<div class='code-listing'><code><pre>
# Will evaluate to `true`.
if 2 in [2, 4, 6, 8]:
    print("Contains!")
</pre></code></div>
</div>
</div>
<a id='a-hash' name='hash'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func hash() -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a hashed 32-bit integer value representing the array and its contents.</aside>

<p><aside class='note'><p class='label'>Note:</p> <a href="godot:Array"><code class='typeref'>Array</code></a>s with equal content will always produce identical hash values. However, the reverse is not true. Returning identical hash values does <i>not</i> imply the arrays are equal, because different arrays can have identical hash values due to hash collisions.</aside>

<p></aside>

</div>
</div>
<a id='a-insert' name='insert'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func insert(position: <a href="godot:int">int</a>, value: <a href="godot:Variant">Variant</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (<code>pos == size()</code>). Returns <code class='constant'><a href='#OK'>OK</a></code> on success, or one of the other <a href='godot:@GlobalScope#Error'><code class='enum'>Error</code></a> values if the operation failed.</aside>

<p><aside class='note'><p class='label'>Note:</p> This method acts in-place and doesn't return a modified array.</aside>

<p><aside class='note'><p class='label'>Note:</p> On large arrays, this method will be slower if the inserted element is close to the beginning of the array (index 0). This is because all elements placed after the newly inserted element have to be reindexed.</aside>

<p></aside>

</div>
</div>
<a id='a-is_empty' name='is_empty'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_empty() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the array is empty.</aside>

<p></aside>

</div>
</div>
<a id='a-is_read_only' name='is_read_only'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_read_only() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the array is read-only. See <a href='#make_read_only'><code class='method'>make_read_only</code></a>. Arrays are automatically read-only if declared with <code>const</code> keyword.</aside>

<p></aside>

</div>
</div>
<a id='a-is_same_typed' name='is_same_typed'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_same_typed(array: <a href="godot:Array">Array</a>) -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the array is typed the same as <code class='param'>array</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-is_typed' name='is_typed'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_typed() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the array is typed. Typed arrays can only store elements of their associated type and provide type safety for the <code>[]</code> operator. Methods of typed array still return <a href="godot:Variant"><code class='typeref'>Variant</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-make_read_only' name='make_read_only'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func make_read_only() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Makes the array read-only, i.e. disabled modifying of the array's elements. Does not apply to nested content, e.g. content of nested arrays.</aside>

<p></aside>

</div>
</div>
<a id='a-map' name='map'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func map(method: <a href="godot:Callable">Callable</a>) -> <a href="godot:Array">Array</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Calls the provided <a href="godot:Callable"><code class='typeref'>Callable</code></a> for each element in the array and returns a new array filled with values returned by the method.</aside>

<p>The callable's method should take one <a href="godot:Variant"><code class='typeref'>Variant</code></a> parameter (the current array element) and can return any <a href="godot:Variant"><code class='typeref'>Variant</code></a>.</aside>

<div class='code-listing'><code><pre>
func _ready():
    print([1, 2, 3].map(negate)) # Prints [-1, -2, -3].
    print([1, 2, 3].map(func(number): return -number)) # Same as above, but using lambda function.

func negate(number):
    return -number
</pre></code></div>
<p>See also <a href='#filter'><code class='method'>filter</code></a>, <a href='#reduce'><code class='method'>reduce</code></a>, <a href='#any'><code class='method'>any</code></a> and <a href='#all'><code class='method'>all</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-max' name='max'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func max() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the maximum value contained in the array if all elements are of comparable types. If the elements can't be compared, <code>null</code> is returned.</aside>

<p>To find the maximum value using a custom comparator, you can use <a href='#reduce'><code class='method'>reduce</code></a>. In this example every array element is checked and the first maximum value is returned:</aside>

<div class='code-listing'><code><pre>
func _ready():
    var arr = [Vector2(0, 1), Vector2(2, 0), Vector2(1, 1), Vector2(1, 0), Vector2(0, 2)]
    # In this example we compare the lengths.
    print(arr.reduce(func(max, val): return val if is_length_greater(val, max) else max))

func is_length_greater(a, b):
    return a.length() > b.length()
</pre></code></div>
<p></aside>

</div>
</div>
<a id='a-min' name='min'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func min() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the minimum value contained in the array if all elements are of comparable types. If the elements can't be compared, <code>null</code> is returned.</aside>

<p>See also <a href='#max'><code class='method'>max</code></a> for an example of using a custom comparator.</aside>

<p></aside>

</div>
</div>
<a id='a-pick_random' name='pick_random'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func pick_random() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a random value from the target array. Prints an error and returns <code>null</code> if the array is empty.</aside>

<div class='code-listing'><code><pre>
var array: Array[int] = [1, 2, 3, 4]
print(array.pick_random())  # Prints either of the four numbers.
</pre></code></div>
</div>
</div>
<a id='a-pop_at' name='pop_at'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func pop_at(position: <a href="godot:int">int</a>) -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes and returns the element of the array at index <code class='param'>position</code>. If negative, <code class='param'>position</code> is considered relative to the end of the array. Leaves the array unchanged and returns <code>null</code> if the array is empty or if it's accessed out of bounds. An error message is printed when the array is accessed out of bounds, but not when the array is empty.</aside>

<p><aside class='note'><p class='label'>Note:</p> On large arrays, this method can be slower than <a href='#pop_back'><code class='method'>pop_back</code></a> as it will reindex the array's elements that are located after the removed element. The larger the array and the lower the index of the removed element, the slower <a href='#pop_at'><code class='method'>pop_at</code></a> will be.</aside>

<p></aside>

</div>
</div>
<a id='a-pop_back' name='pop_back'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func pop_back() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes and returns the last element of the array. Returns <code>null</code> if the array is empty, without printing an error message. See also <a href='#pop_front'><code class='method'>pop_front</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-pop_front' name='pop_front'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func pop_front() -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes and returns the first element of the array. Returns <code>null</code> if the array is empty, without printing an error message. See also <a href='#pop_back'><code class='method'>pop_back</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> On large arrays, this method is much slower than <a href='#pop_back'><code class='method'>pop_back</code></a> as it will reindex all the array's elements every time it's called. The larger the array, the slower <a href='#pop_front'><code class='method'>pop_front</code></a> will be.</aside>

<p></aside>

</div>
</div>
<a id='a-push_back' name='push_back'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func push_back(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Appends an element at the end of the array. See also <a href='#push_front'><code class='method'>push_front</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-push_front' name='push_front'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func push_front(value: <a href="godot:Variant">Variant</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Adds an element at the beginning of the array. See also <a href='#push_back'><code class='method'>push_back</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> On large arrays, this method is much slower than <a href='#push_back'><code class='method'>push_back</code></a> as it will reindex all the array's elements every time it's called. The larger the array, the slower <a href='#push_front'><code class='method'>push_front</code></a> will be.</aside>

<p></aside>

</div>
</div>
<a id='a-reduce' name='reduce'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func reduce(method: <a href="godot:Callable">Callable</a>, accum: <a href="godot:Variant">Variant</a> = null) -> <a href="godot:Variant">Variant</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Calls the provided <a href="godot:Callable"><code class='typeref'>Callable</code></a> for each element in array and accumulates the result in <code class='param'>accum</code>.</aside>

<p>The callable's method takes two arguments: the current value of <code class='param'>accum</code> and the current array element. If <code class='param'>accum</code> is <code>null</code> (default value), the iteration will start from the second element, with the first one used as initial value of <code class='param'>accum</code>.</aside>

<div class='code-listing'><code><pre>
func _ready():
    print([1, 2, 3].reduce(sum, 10)) # Prints 16.
    print([1, 2, 3].reduce(func(accum, number): return accum + number, 10)) # Same as above, but using lambda function.

func sum(accum, number):
    return accum + number
</pre></code></div>
<p>See also <a href='#map'><code class='method'>map</code></a>, <a href='#filter'><code class='method'>filter</code></a>, <a href='#any'><code class='method'>any</code></a> and <a href='#all'><code class='method'>all</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-remove_at' name='remove_at'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func remove_at(position: <a href="godot:int">int</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes an element from the array by index. If the index does not exist in the array, nothing happens. To remove an element by searching for its value, use <a href='#erase'><code class='method'>erase</code></a> instead.</aside>

<p><aside class='note'><p class='label'>Note:</p> This method acts in-place and doesn't return a modified array.</aside>

<p><aside class='note'><p class='label'>Note:</p> On large arrays, this method will be slower if the removed element is close to the beginning of the array (index 0). This is because all elements placed after the removed element have to be reindexed.</aside>

<p><aside class='note'><p class='label'>Note:</p> <code class='param'>position</code> cannot be negative. To remove an element relative to the end of the array, use <code>arr.remove_at(arr.size() - (i + 1))</code>. To remove the last element from the array without returning the value, use <code>arr.resize(arr.size() - 1)</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-resize' name='resize'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func resize(size: <a href="godot:int">int</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Resizes the array to contain a different number of elements. If the array size is smaller, elements are cleared, if bigger, new elements are <code>null</code>. Returns <code class='constant'><a href='#OK'>OK</a></code> on success, or one of the other <a href='godot:@GlobalScope#Error'><code class='enum'>Error</code></a> values if the operation failed.</aside>

<p>Calling <a href='#resize'><code class='method'>resize</code></a> once and assigning the new values is faster than adding new elements one by one.</aside>

<p><aside class='note'><p class='label'>Note:</p> This method acts in-place and doesn't return a modified array.</aside>

<p></aside>

</div>
</div>
<a id='a-reverse' name='reverse'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func reverse() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Reverses the order of the elements in the array.</aside>

<p></aside>

</div>
</div>
<a id='a-rfind' name='rfind'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func rfind(what: <a href="godot:Variant">Variant</a>, from: <a href="godot:int">int</a> = -1) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.</aside>

<p></aside>

</div>
</div>
<a id='a-shuffle' name='shuffle'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func shuffle() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Shuffles the array such that the items will have a random order. This method uses the global random number generator common to methods such as <a href='godot:@GlobalScope#randi'><code class='method'>@GlobalScope.randi</code></a>. Call <a href='godot:@GlobalScope#randomize'><code class='method'>@GlobalScope.randomize</code></a> to ensure that a new seed will be used each time if you want non-reproducible shuffling.</aside>

<p></aside>

</div>
</div>
<a id='a-size' name='size'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func size() -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the number of elements in the array.</aside>

<p></aside>

</div>
</div>
<a id='a-slice' name='slice'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func slice(begin: <a href="godot:int">int</a>, end: <a href="godot:int">int</a> = 2147483647, step: <a href="godot:int">int</a> = 1, deep: <a href="godot:bool">bool</a> = false) -> <a href="godot:Array">Array</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the slice of the <a href="godot:Array"><code class='typeref'>Array</code></a>, from <code class='param'>begin</code> (inclusive) to <code class='param'>end</code> (exclusive), as a new <a href="godot:Array"><code class='typeref'>Array</code></a>.</aside>

<p>The absolute value of <code class='param'>begin</code> and <code class='param'>end</code> will be clamped to the array size, so the default value for <code class='param'>end</code> makes it slice to the size of the array by default (i.e. <code>arr.slice(1)</code> is a shorthand for <code>arr.slice(1, arr.size())</code>).</aside>

<p>If either <code class='param'>begin</code> or <code class='param'>end</code> are negative, they will be relative to the end of the array (i.e. <code>arr.slice(0, -2)</code> is a shorthand for <code>arr.slice(0, arr.size() - 2)</code>).</aside>

<p>If specified, <code class='param'>step</code> is the relative index between source elements. It can be negative, then <code class='param'>begin</code> must be higher than <code class='param'>end</code>. For example, <code>[0, 1, 2, 3, 4, 5].slice(5, 1, -2)</code> returns <code>[5, 3]</code>.</aside>

<p>If <code class='param'>deep</code> is true, each element will be copied by value rather than by reference.</aside>

<p><aside class='note'><p class='label'>Note:</p> To include the first element when <code class='param'>step</code> is negative, use <code>arr.slice(begin, -arr.size() - 1, step)</code> (i.e. <code>[0, 1, 2].slice(1, -4, -1)</code> returns <code>[1, 0]</code>).</aside>

<p></aside>

</div>
</div>
<a id='a-sort' name='sort'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func sort() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Sorts the array.</aside>

<p><aside class='note'><p class='label'>Note:</p> The sorting algorithm used is not <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">stable</a>. This means that values considered equal may have their order changed when using <a href='#sort'><code class='method'>sort</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> Strings are sorted in alphabetical order (as opposed to natural order). This may lead to unexpected behavior when sorting an array of strings ending with a sequence of numbers. Consider the following example:</aside>

<div class='code-listing'><code><pre>
var strings = ["string1", "string2", "string10", "string11"]
strings.sort()
print(strings) # Prints [string1, string10, string11, string2]
</pre></code></div>
<div class='code-listing'><code><pre>
var strings = ["string1", "string2", "string10", "string11"]
strings.sort_custom(func(a, b): return a.naturalnocasecmp_to(b) < 0)
print(strings) # Prints [string1, string2, string10, string11]
</pre></code></div>
</div>
</div>
<a id='a-sort_custom' name='sort_custom'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func sort_custom(func: <a href="godot:Callable">Callable</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Sorts the array using a custom method. The custom method receives two arguments (a pair of elements from the array) and must return either <code>true</code> or <code>false</code>. For two elements <code>a</code> and <code>b</code>, if the given method returns <code>true</code>, element <code>b</code> will be after element <code>a</code> in the array.</aside>

<p><aside class='note'><p class='label'>Note:</p> The sorting algorithm used is not <a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">stable</a>. This means that values considered equal may have their order changed when using <a href='#sort_custom'><code class='method'>sort_custom</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> You cannot randomize the return value as the heapsort algorithm expects a deterministic result. Randomizing the return value will result in unexpected behavior.</aside>

<div class='code-listing'><code><pre>
func sort_ascending(a, b):
    if a[0] < b[0]:
        return true
    return false

func _ready():
    var my_items = [[5, "Potato"], [9, "Rice"], [4, "Tomato"]]
    my_items.sort_custom(sort_ascending)
    print(my_items) # Prints [[4, Tomato], [5, Potato], [9, Rice]].

    # Descending, lambda version.
    my_items.sort_custom(func(a, b): return a[0] > b[0])
    print(my_items) # Prints [[9, Rice], [5, Potato], [4, Tomato]].
</pre></code></div>
</div>
</div>
<h3>Operators</h3>
<a id='a-operator !=' name='operator !='></a>
<div class='signature'>
<code>
operator !=(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Compares the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> against the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a>. Returns <code>true</code> if the sizes or contents of the arrays are <i>not</i> equal, <code>false</code> otherwise.</aside>

<p></aside>

</div>
<a id='a-operator +' name='operator +'></a>
<div class='signature'>
<code>
operator +(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Concatenates two <a href="godot:Array"><code class='typeref'>Array</code></a>s together, with the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a> being added to the end of the <a href="godot:Array"><code class='typeref'>Array</code></a> specified in the left operand. For example, <code>[1, 2] + [3, 4]</code> results in <code>[1, 2, 3, 4]</code>.</aside>

<p></aside>

</div>
<a id='a-operator <' name='operator <'></a>
<div class='signature'>
<code>
operator <(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Performs a comparison for each index between the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> and the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a>, considering the highest common index of both arrays for this comparison: Returns <code>true</code> on the first occurrence of an element that is less, or <code>false</code> if the element is greater. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns <code>false</code> if the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> has fewer elements, otherwise it returns <code>true</code>.</aside>

<p></aside>

</div>
<a id='a-operator <=' name='operator <='></a>
<div class='signature'>
<code>
operator <=(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Performs a comparison for each index between the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> and the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a>, considering the highest common index of both arrays for this comparison: Returns <code>true</code> on the first occurrence of an element that is less, or <code>false</code> if the element is greater. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns <code>true</code> if the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> has the same number of elements or fewer, otherwise it returns <code>false</code>.</aside>

<p></aside>

</div>
<a id='a-operator ==' name='operator =='></a>
<div class='signature'>
<code>
operator ==(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Compares the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> against the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a>. Returns <code>true</code> if the sizes and contents of the arrays are equal, <code>false</code> otherwise.</aside>

<p></aside>

</div>
<a id='a-operator >' name='operator >'></a>
<div class='signature'>
<code>
operator >(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Performs a comparison for each index between the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> and the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a>, considering the highest common index of both arrays for this comparison: Returns <code>true</code> on the first occurrence of an element that is greater, or <code>false</code> if the element is less. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns <code>true</code> if the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a> has more elements, otherwise it returns <code>false</code>.</aside>

<p></aside>

</div>
<a id='a-operator >=' name='operator >='></a>
<div class='signature'>
<code>
operator >=(right: <a href="godot:Array">Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Performs a comparison for each index between the left operand <a href="godot:Array"><code class='typeref'>Array</code></a> and the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a>, considering the highest common index of both arrays for this comparison: Returns <code>true</code> on the first occurrence of an element that is greater, or <code>false</code> if the element is less. Note that depending on the type of data stored, this function may be recursive. If all elements are equal, it compares the length of both arrays and returns <code>true</code> if the <code class='param'>right</code> <a href="godot:Array"><code class='typeref'>Array</code></a> has more or the same number of elements, otherwise it returns <code>false</code>.</aside>

<p></aside>

</div>
<a id='a-operator []' name='operator []'></a>
<div class='signature'>
<code>
operator [](index: <a href="godot:int">int</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Returns a reference to the element of type <a href="godot:Variant"><code class='typeref'>Variant</code></a> at the specified location. Arrays start at index 0. <code class='param'>index</code> can be a zero or positive value to start from the beginning, or a negative value to start from the end. Out-of-bounds array access causes a run-time error, which will result in an error being printed and the project execution pausing if run from the editor.</aside>

<p></aside>

</div>
