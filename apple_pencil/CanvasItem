<html>
<head>
    <title>Class CanvasItem</title>
    <style>
    :root {
        color-scheme: light dark;
        --color-background: #ffffff;
        --color-text: #333333;
        --color-link: #0366d6;
        --color-code-background: #f6f8fa;
        --color-code-text: #24292e;
        --color-aside-background: #f6f8fa;
        --color-aside-border: #dfe2e5;
        --color-header-background: #f6f8fa;
        --color-signature-background: #f1f8ff;
        --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
        --font-mono: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
        --font-size-code: 14px;
    }
    
    @media (prefers-color-scheme: dark) {
        :root {
            --color-background: #0d1117;
            --color-text: #c9d1d9;
            --color-link: #58a6ff;
            --color-code-background: #161b22;
            --color-code-text: #c9d1d9;
            --color-aside-background: #161b22;
            --color-aside-border: #30363d;
            --color-header-background: #161b22;
            --color-signature-background: #1d2d3e;
        }
    }
    
    body {
        font-family: var(--font-sans);
        line-height: 1.5;
        color: var(--color-text);
        background-color: var(--color-background);
        margin: 0;
        padding: 20px;
    }
    
    h1, h2, h3 {
        margin-top: 24px;
        margin-bottom: 16px;
        font-weight: 600;
        line-height: 1.25;
    }
    
    h1 {
        font-size: 2em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h2 {
        font-size: 1.5em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h3 {
        font-size: 1.25em;
    }
    
    a {
        color: var(--color-link);
        text-decoration: none;
    }
    
    a:hover {
        text-decoration: underline;
    }
    
    code, pre {
        font-family: var(--font-mono);
        font-size: var(--font-size-code);
    }
    
    pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 16px;
        overflow: auto;
    }
    
    pre code {
        background-color: transparent;
        padding: 0;
    }
    
    .signature {
        background-color: var(--color-signature-background);
        padding: 16px;
        border-radius: 6px;
        margin-bottom: 16px;
    }
    
    .description {
        margin-bottom: 16px;
    }
    
    aside {
        background-color: var(--color-aside-background);
        border-left: 4px solid var(--color-aside-border);
        border-radius: 3px;
        padding: 16px;
        margin-bottom: 16px;
    }
    
    aside .label {
        font-weight: 600;
        margin: 0 0 8px;
    }
    
    .member {
        margin-bottom: 24px;
    }
    
    .enumvalue {
        margin-left: 16px;
    }
    
    .deprecated, .experimental {
        font-weight: 600;
        color: #d73a49;
    }
    
    ul {
        padding-left: 24px;
    }
    
    .signature code, .member code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    .signature pre, .member pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 12px;
        margin: 0;
        overflow: auto;
    }
    
    .signature pre code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    p code, li code {
        background-color: var(--color-code-background);
        border-radius: 3px;
        padding: 2px 4px;
    }
    
    .section-divider {
        border: none;
        border-top: 2px solid var(--color-divider);
        margin: 20px 0;
    }
    </style>
</head>
<body>
<h3 class='secondary'>Class</h3>
<h1>CanvasItem</h1>
<p>
		Abstract base class for everything in 2D space.
	</p>
<hr>
<h2>Description</h2>
<p></aside>

<p>Abstract base class for everything in 2D space. Canvas items are laid out in a tree; children inherit and extend their parent's transform. <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> is extended by <a href="godot:Control"><code class='typeref'>Control</code></a> for GUI-related nodes, and by <a href="godot:Node2D"><code class='typeref'>Node2D</code></a> for 2D game objects.</aside>

<p>Any <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> can draw. For this, <a href='#queue_redraw'><code class='method'>queue_redraw</code></a> is called by the engine, then <code class='constant'><a href='#NOTIFICATION_DRAW'>NOTIFICATION_DRAW</a></code> will be received on idle time to request a redraw. Because of this, canvas items don't need to be redrawn on every frame, improving the performance significantly. Several functions for drawing on the <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> are provided (see <code>draw_*</code> functions). However, they can only be used inside <a href='#_draw'><code class='method'>_draw</code></a>, its corresponding <a href='godot:Object#_notification'><code class='method'>Object._notification</code></a> or methods connected to the <a href='#draw'><code class='member'>draw</code></a> signal.</aside>

<p>Canvas items are drawn in tree order on their canvas layer. By default, children are on top of their parents, so a root <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> will be drawn behind everything. This behavior can be changed on a per-item basis.</aside>

<p>A <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> can be hidden, which will also hide its children. By adjusting various other properties of a <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>, you can also modulate its color (via <a href='#modulate'><code class='member'>modulate</code></a> or <a href='#self_modulate'><code class='member'>self_modulate</code></a>), change its Z-index, blend mode, and more.</aside>

<p>Note that properties like transform, modulation, and visibility are only propagated to <i>direct</i> <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> child nodes. If there is a non-<a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> node in between, like <a href="godot:Node"><code class='typeref'>Node</code></a> or <a href="godot:AnimationPlayer"><code class='typeref'>AnimationPlayer</code></a>, the <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> nodes below will have an independent position and <a href='#modulate'><code class='member'>modulate</code></a> chain. See also <a href='#top_level'><code class='member'>top_level</code></a>.</aside>

<p></aside>

<h2>Tutorials</h2>
<ul>
    <li><a href="open-external:https://docs.godotengine.org/en/4.2/tutorials/2d/2d_transforms.html">Viewport and canvas transforms</a>
</ul>
<h2>Topics</h2>
<h3>Properties</h3>
<a id='a-clip_children' name='clip_children'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  clip_children: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>Allows the current node to clip child nodes, essentially acting as a mask.</aside>

<p></aside>

</div>
</div>
<a id='a-light_mask' name='light_mask'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  light_mask: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The rendering layers in which this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> responds to <a href="godot:Light2D"><code class='typeref'>Light2D</code></a> nodes.</aside>

<p></aside>

</div>
</div>
<a id='a-material' name='material'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  material: <a href="godot:Material">Material</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The material applied to this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-modulate' name='modulate'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  modulate: <a href="godot:Color">Color</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The color applied to this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>. This property does affect child <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>s, unlike <a href='#self_modulate'><code class='member'>self_modulate</code></a> which only affects the node itself.</aside>

<p></aside>

</div>
</div>
<a id='a-self_modulate' name='self_modulate'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  self_modulate: <a href="godot:Color">Color</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The color applied to this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>. This property does <b>not</b> affect child <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>s, unlike <a href='#modulate'><code class='member'>modulate</code></a> which affects both the node itself and its children.</aside>

<p><aside class='note'><p class='label'>Note:</p> Internal children (e.g. sliders in <a href="godot:ColorPicker"><code class='typeref'>ColorPicker</code></a> or tab bar in <a href="godot:TabContainer"><code class='typeref'>TabContainer</code></a>) are also not affected by this property (see <code>include_internal</code> parameter of <a href='godot:Node#get_child'><code class='method'>Node.get_child</code></a> and other similar methods).</aside>

<p></aside>

</div>
</div>
<a id='a-show_behind_parent' name='show_behind_parent'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  show_behind_parent: <a href="godot:bool">bool</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>If <code>true</code>, the object draws behind its parent.</aside>

<p></aside>

</div>
</div>
<a id='a-texture_filter' name='texture_filter'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  texture_filter: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The texture filtering mode to use on this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-texture_repeat' name='texture_repeat'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  texture_repeat: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The texture repeating mode to use on this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-top_level' name='top_level'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  top_level: <a href="godot:bool">bool</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>If <code>true</code>, this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> will <i>not</i> inherit its transform from parent <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>s. Its draw order will also be changed to make it draw on top of other <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>s that do not have <a href='#top_level'><code class='member'>top_level</code></a> set to <code>true</code>. The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> will effectively act as if it was placed as a child of a bare <a href="godot:Node"><code class='typeref'>Node</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-use_parent_material' name='use_parent_material'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  use_parent_material: <a href="godot:bool">bool</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>If <code>true</code>, the parent <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>'s <a href='#material'><code class='member'>material</code></a> property is used as this one's material.</aside>

<p></aside>

</div>
</div>
<a id='a-visibility_layer' name='visibility_layer'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  visibility_layer: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>The rendering layer in which this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> is rendered by <a href="godot:Viewport"><code class='typeref'>Viewport</code></a> nodes. A <a href="godot:Viewport"><code class='typeref'>Viewport</code></a> will render a <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> if it and all its parents share a layer with the <a href="godot:Viewport"><code class='typeref'>Viewport</code></a>'s canvas cull mask.</aside>

<p></aside>

</div>
</div>
<a id='a-visible' name='visible'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  visible: <a href="godot:bool">bool</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>If <code>true</code>, this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> is drawn. The node is only visible if all of its ancestors are visible as well (in other words, <a href='#is_visible_in_tree'><code class='method'>is_visible_in_tree</code></a> must return <code>true</code>).</aside>

<p><aside class='note'><p class='label'>Note:</p> For controls that inherit <a href="godot:Popup"><code class='typeref'>Popup</code></a>, the correct way to make them visible is to call one of the multiple <code>popup*()</code> functions instead.</aside>

<p></aside>

</div>
</div>
<a id='a-y_sort_enabled' name='y_sort_enabled'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  y_sort_enabled: <a href="godot:bool">bool</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>If <code>true</code>, this and child <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> nodes with a higher Y position are rendered in front of nodes with a lower Y position. If <code>false</code>, this and child <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> nodes are rendered normally in scene tree order.</aside>

<p>With Y-sorting enabled on a parent node ('A') but disabled on a child node ('B'), the child node ('B') is sorted but its children ('C1', 'C2', etc) render together on the same Y position as the child node ('B'). This allows you to organize the render order of a scene without changing the scene tree.</aside>

<p>Nodes sort relative to each other only if they are on the same <a href='#z_index'><code class='member'>z_index</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-z_as_relative' name='z_as_relative'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  z_as_relative: <a href="godot:bool">bool</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>If <code>true</code>, the node's Z index is relative to its parent's Z index. If this node's Z index is 2 and its parent's effective Z index is 3, then this node's effective Z index will be 2 + 3 = 5.</aside>

<p></aside>

</div>
</div>
<a id='a-z_index' name='z_index'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  z_index: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>Controls the order in which the nodes render. A node with a higher Z index will display in front of others. Must be between <code class='constant'><a href='#RenderingServer.CANVAS_ITEM_Z_MIN'>RenderingServer.CANVAS_ITEM_Z_MIN</a></code> and <code class='constant'><a href='#RenderingServer.CANVAS_ITEM_Z_MAX'>RenderingServer.CANVAS_ITEM_Z_MAX</a></code> (inclusive).</aside>

<p><aside class='note'><p class='label'>Note:</p> Changing the Z index of a <a href="godot:Control"><code class='typeref'>Control</code></a> only affects the drawing order, not the order in which input events are handled. This can be useful to implement certain UI animations, e.g. a menu where hovered items are scaled and should overlap others.</aside>

<p></aside>

</div>
</div>
<h3>Methods</h3>
<a id='a-_draw' name='_draw'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func _draw() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Called when <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> has been requested to redraw (after <a href='#queue_redraw'><code class='method'>queue_redraw</code></a> is called, either manually or by the engine).</aside>

<p>Corresponds to the <code class='constant'><a href='#NOTIFICATION_DRAW'>NOTIFICATION_DRAW</a></code> notification in <a href='godot:Object#_notification'><code class='method'>Object._notification</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_animation_slice' name='draw_animation_slice'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_animation_slice(animation_length: <a href="godot:float">float</a>, slice_begin: <a href="godot:float">float</a>, slice_end: <a href="godot:float">float</a>, offset: <a href="godot:float">float</a> = 0.0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Subsequent drawing commands will be ignored unless they fall within the specified animation slice. This is a faster way to implement animations that loop on background rather than redrawing constantly.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_arc' name='draw_arc'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_arc(center: <a href="godot:Vector2">Vector2</a>, radius: <a href="godot:float">float</a>, start_angle: <a href="godot:float">float</a>, end_angle: <a href="godot:float">float</a>, point_count: <a href="godot:int">int</a>, color: <a href="godot:Color">Color</a>, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws an unfilled arc between the given angles with a uniform <code class='param'>color</code> and <code class='param'>width</code> and optional antialiasing (supported only for positive <code class='param'>width</code>). The larger the value of <code class='param'>point_count</code>, the smoother the curve. See also <a href='#draw_circle'><code class='method'>draw_circle</code></a>.</aside>

<p>If <code class='param'>width</code> is negative, it will be ignored and the arc will be drawn using <code class='constant'><a href='#RenderingServer.PRIMITIVE_LINE_STRIP'>RenderingServer.PRIMITIVE_LINE_STRIP</a></code>. This means that when the CanvasItem is scaled, the arc will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p>The arc is drawn from <code class='param'>start_angle</code> towards the value of <code class='param'>end_angle</code> so in clockwise direction if <code>start_angle < end_angle</code> and counter-clockwise otherwise. Passing the same angles but in reversed order will produce the same arc. If absolute difference of <code class='param'>start_angle</code> and <code class='param'>end_angle</code> is greater than <code class='constant'><a href='#@GDScript.TAU'>@GDScript.TAU</a></code> radians, then a full circle arc is drawn (i.e. arc will not overlap itself).</aside>

<p></aside>

</div>
</div>
<a id='a-draw_char' name='draw_char'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_char(font: <a href="godot:Font">Font</a>, pos: <a href="godot:Vector2">Vector2</a>, char: <a href="godot:String">String</a>, font_size: <a href="godot:int">int</a> = 16, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1)) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a string first character using a custom font.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_char_outline' name='draw_char_outline'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_char_outline(font: <a href="godot:Font">Font</a>, pos: <a href="godot:Vector2">Vector2</a>, char: <a href="godot:String">String</a>, font_size: <a href="godot:int">int</a> = 16, size: <a href="godot:int">int</a> = -1, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1)) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a string first character outline using a custom font.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_circle' name='draw_circle'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_circle(position: <a href="godot:Vector2">Vector2</a>, radius: <a href="godot:float">float</a>, color: <a href="godot:Color">Color</a>, filled: <a href="godot:bool">bool</a> = true, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a circle. See also <a href='#draw_arc'><code class='method'>draw_arc</code></a>, <a href='#draw_polyline'><code class='method'>draw_polyline</code></a>, and <a href='#draw_polygon'><code class='method'>draw_polygon</code></a>.</aside>

<p>If <code class='param'>filled</code> is <code>true</code>, the circle will be filled with the <code class='param'>color</code> specified. If <code class='param'>filled</code> is <code>false</code>, the circle will be drawn as a stroke with the <code class='param'>color</code> and <code class='param'>width</code> specified.</aside>

<p>If <code class='param'>width</code> is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p>If <code class='param'>antialiased</code> is <code>true</code>, half transparent "feathers" will be attached to the boundary, making outlines smooth.</aside>

<p><aside class='note'><p class='label'>Note:</p> <code class='param'>width</code> is only effective if <code class='param'>filled</code> is <code>false</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_colored_polygon' name='draw_colored_polygon'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_colored_polygon(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, color: <a href="godot:Color">Color</a>, uvs: <a href="godot:PackedVector2Array">PackedVector2Array</a> = PackedVector2Array(), texture: <a href="godot:Texture2D">Texture2D</a> = null) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a colored polygon of any number of points, convex or concave. Unlike <a href='#draw_polygon'><code class='method'>draw_polygon</code></a>, a single color must be specified for the whole polygon.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_dashed_line' name='draw_dashed_line'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_dashed_line(from: <a href="godot:Vector2">Vector2</a>, to: <a href="godot:Vector2">Vector2</a>, color: <a href="godot:Color">Color</a>, width: <a href="godot:float">float</a> = -1.0, dash: <a href="godot:float">float</a> = 2.0, aligned: <a href="godot:bool">bool</a> = true, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a dashed line from a 2D point to another, with a given color and width. See also <a href='#draw_multiline'><code class='method'>draw_multiline</code></a> and <a href='#draw_polyline'><code class='method'>draw_polyline</code></a>.</aside>

<p>If <code class='param'>width</code> is negative, then a two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the line parts will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p>If <code class='param'>antialiased</code> is <code>true</code>, half transparent "feathers" will be attached to the boundary, making outlines smooth.</aside>

<p><aside class='note'><p class='label'>Note:</p> <code class='param'>antialiased</code> is only effective if <code class='param'>width</code> is greater than <code>0.0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_end_animation' name='draw_end_animation'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_end_animation() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>After submitting all animations slices via <a href='#draw_animation_slice'><code class='method'>draw_animation_slice</code></a>, this function can be used to revert drawing to its default state (all subsequent drawing commands will be visible). If you don't care about this particular use case, usage of this function after submitting the slices is not required.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_lcd_texture_rect_region' name='draw_lcd_texture_rect_region'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_lcd_texture_rect_region(texture: <a href="godot:Texture2D">Texture2D</a>, rect: <a href="godot:Rect2">Rect2</a>, src_rect: <a href="godot:Rect2">Rect2</a>, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1)) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a textured rectangle region of the font texture with LCD subpixel anti-aliasing at a given position, optionally modulated by a color.</aside>

<p>Texture is drawn using the following blend operation, blend mode of the <a href="godot:CanvasItemMaterial"><code class='typeref'>CanvasItemMaterial</code></a> is ignored:</aside>

<div class='code-listing'><code><pre>
dst.r = texture.r * modulate.r * modulate.a + dst.r * (1.0 - texture.r * modulate.a);
dst.g = texture.g * modulate.g * modulate.a + dst.g * (1.0 - texture.g * modulate.a);
dst.b = texture.b * modulate.b * modulate.a + dst.b * (1.0 - texture.b * modulate.a);
dst.a = modulate.a + dst.a * (1.0 - modulate.a);
</pre></code></div>
<p></aside>

</div>
</div>
<a id='a-draw_line' name='draw_line'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_line(from: <a href="godot:Vector2">Vector2</a>, to: <a href="godot:Vector2">Vector2</a>, color: <a href="godot:Color">Color</a>, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased. See also <a href='#draw_multiline'><code class='method'>draw_multiline</code></a> and <a href='#draw_polyline'><code class='method'>draw_polyline</code></a>.</aside>

<p>If <code class='param'>width</code> is negative, then a two-point primitive will be drawn instead of a four-point one. This means that when the CanvasItem is scaled, the line will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_mesh' name='draw_mesh'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_mesh(mesh: <a href="godot:Mesh">Mesh</a>, texture: <a href="godot:Texture2D">Texture2D</a>, transform: <a href="godot:Transform2D">Transform2D</a> = Transform2D(1, 0, 0, 1, 0, 0), modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1)) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a <a href="godot:Mesh"><code class='typeref'>Mesh</code></a> in 2D, using the provided texture. See <a href="godot:MeshInstance2D"><code class='typeref'>MeshInstance2D</code></a> for related documentation.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_msdf_texture_rect_region' name='draw_msdf_texture_rect_region'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_msdf_texture_rect_region(texture: <a href="godot:Texture2D">Texture2D</a>, rect: <a href="godot:Rect2">Rect2</a>, src_rect: <a href="godot:Rect2">Rect2</a>, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), outline: <a href="godot:float">float</a> = 0.0, pixel_range: <a href="godot:float">float</a> = 4.0, scale: <a href="godot:float">float</a> = 1.0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a textured rectangle region of the multi-channel signed distance field texture at a given position, optionally modulated by a color. See <a href='godot:FontFile#multichannel_signed_distance_field'><code class='member'>FontFile.multichannel_signed_distance_field</code></a> for more information and caveats about MSDF font rendering.</aside>

<p>If <code class='param'>outline</code> is positive, each alpha channel value of pixel in region is set to maximum value of true distance in the <code class='param'>outline</code> radius.</aside>

<p>Value of the <code class='param'>pixel_range</code> should the same that was used during distance field texture generation.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_multiline' name='draw_multiline'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_multiline(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, color: <a href="godot:Color">Color</a>, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws multiple disconnected lines with a uniform <code class='param'>width</code> and <code class='param'>color</code>. Each line is defined by two consecutive points from <code class='param'>points</code> array, i.e. i-th segment consists of <code>points[2 * i]</code>, <code>points[2 * i + 1]</code> endpoints. When drawing large amounts of lines, this is faster than using individual <a href='#draw_line'><code class='method'>draw_line</code></a> calls. To draw interconnected lines, use <a href='#draw_polyline'><code class='method'>draw_polyline</code></a> instead.</aside>

<p>If <code class='param'>width</code> is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p><aside class='note'><p class='label'>Note:</p> <code class='param'>antialiased</code> is only effective if <code class='param'>width</code> is greater than <code>0.0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_multiline_colors' name='draw_multiline_colors'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_multiline_colors(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, colors: <a href="godot:PackedColorArray">PackedColorArray</a>, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws multiple disconnected lines with a uniform <code class='param'>width</code> and segment-by-segment coloring. Each segment is defined by two consecutive points from <code class='param'>points</code> array and a corresponding color from <code class='param'>colors</code> array, i.e. i-th segment consists of <code>points[2 * i]</code>, <code>points[2 * i + 1]</code> endpoints and has <code>colors<i></code> color. When drawing large amounts of lines, this is faster than using individual <a href='#draw_line'><code class='method'>draw_line</code></a> calls. To draw interconnected lines, use <a href='#draw_polyline_colors'><code class='method'>draw_polyline_colors</code></a> instead.</aside>

<p>If <code class='param'>width</code> is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p><aside class='note'><p class='label'>Note:</p> <code class='param'>antialiased</code> is only effective if <code class='param'>width</code> is greater than <code>0.0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_multiline_string' name='draw_multiline_string'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_multiline_string(font: <a href="godot:Font">Font</a>, pos: <a href="godot:Vector2">Vector2</a>, text: <a href="godot:String">String</a>, alignment: <a href="godot:int">int</a> = 0, width: <a href="godot:float">float</a> = -1, font_size: <a href="godot:int">int</a> = 16, max_lines: <a href="godot:int">int</a> = -1, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), brk_flags: <a href="godot:int">int</a> = 3, justification_flags: <a href="godot:int">int</a> = 3, direction: <a href="godot:int">int</a> = 0, orientation: <a href="godot:int">int</a> = 0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Breaks <code class='param'>text</code> into lines and draws it using the specified <code class='param'>font</code> at the <code class='param'>pos</code> (top-left corner). The text will have its color multiplied by <code class='param'>modulate</code>. If <code class='param'>width</code> is greater than or equal to 0, the text will be clipped if it exceeds the specified width.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_multiline_string_outline' name='draw_multiline_string_outline'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_multiline_string_outline(font: <a href="godot:Font">Font</a>, pos: <a href="godot:Vector2">Vector2</a>, text: <a href="godot:String">String</a>, alignment: <a href="godot:int">int</a> = 0, width: <a href="godot:float">float</a> = -1, font_size: <a href="godot:int">int</a> = 16, max_lines: <a href="godot:int">int</a> = -1, size: <a href="godot:int">int</a> = 1, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), brk_flags: <a href="godot:int">int</a> = 3, justification_flags: <a href="godot:int">int</a> = 3, direction: <a href="godot:int">int</a> = 0, orientation: <a href="godot:int">int</a> = 0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Breaks <code class='param'>text</code> to the lines and draws text outline using the specified <code class='param'>font</code> at the <code class='param'>pos</code> (top-left corner). The text will have its color multiplied by <code class='param'>modulate</code>. If <code class='param'>width</code> is greater than or equal to 0, the text will be clipped if it exceeds the specified width.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_multimesh' name='draw_multimesh'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_multimesh(multimesh: <a href="godot:MultiMesh">MultiMesh</a>, texture: <a href="godot:Texture2D">Texture2D</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a <a href="godot:MultiMesh"><code class='typeref'>MultiMesh</code></a> in 2D with the provided texture. See <a href="godot:MultiMeshInstance2D"><code class='typeref'>MultiMeshInstance2D</code></a> for related documentation.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_polygon' name='draw_polygon'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_polygon(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, colors: <a href="godot:PackedColorArray">PackedColorArray</a>, uvs: <a href="godot:PackedVector2Array">PackedVector2Array</a> = PackedVector2Array(), texture: <a href="godot:Texture2D">Texture2D</a> = null) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a solid polygon of any number of points, convex or concave. Unlike <a href='#draw_colored_polygon'><code class='method'>draw_colored_polygon</code></a>, each point's color can be changed individually. See also <a href='#draw_polyline'><code class='method'>draw_polyline</code></a> and <a href='#draw_polyline_colors'><code class='method'>draw_polyline_colors</code></a>. If you need more flexibility (such as being able to use bones), use <a href='godot:RenderingServer#canvas_item_add_triangle_array'><code class='method'>RenderingServer.canvas_item_add_triangle_array</code></a> instead.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_polyline' name='draw_polyline'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_polyline(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, color: <a href="godot:Color">Color</a>, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws interconnected line segments with a uniform <code class='param'>color</code> and <code class='param'>width</code> and optional antialiasing (supported only for positive <code class='param'>width</code>). When drawing large amounts of lines, this is faster than using individual <a href='#draw_line'><code class='method'>draw_line</code></a> calls. To draw disconnected lines, use <a href='#draw_multiline'><code class='method'>draw_multiline</code></a> instead. See also <a href='#draw_polygon'><code class='method'>draw_polygon</code></a>.</aside>

<p>If <code class='param'>width</code> is negative, it will be ignored and the polyline will be drawn using <code class='constant'><a href='#RenderingServer.PRIMITIVE_LINE_STRIP'>RenderingServer.PRIMITIVE_LINE_STRIP</a></code>. This means that when the CanvasItem is scaled, the polyline will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_polyline_colors' name='draw_polyline_colors'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_polyline_colors(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, colors: <a href="godot:PackedColorArray">PackedColorArray</a>, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws interconnected line segments with a uniform <code class='param'>width</code>, point-by-point coloring, and optional antialiasing (supported only for positive <code class='param'>width</code>). Colors assigned to line points match by index between <code class='param'>points</code> and <code class='param'>colors</code>, i.e. each line segment is filled with a gradient between the colors of the endpoints. When drawing large amounts of lines, this is faster than using individual <a href='#draw_line'><code class='method'>draw_line</code></a> calls. To draw disconnected lines, use <a href='#draw_multiline_colors'><code class='method'>draw_multiline_colors</code></a> instead. See also <a href='#draw_polygon'><code class='method'>draw_polygon</code></a>.</aside>

<p>If <code class='param'>width</code> is negative, it will be ignored and the polyline will be drawn using <code class='constant'><a href='#RenderingServer.PRIMITIVE_LINE_STRIP'>RenderingServer.PRIMITIVE_LINE_STRIP</a></code>. This means that when the CanvasItem is scaled, the polyline will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_primitive' name='draw_primitive'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_primitive(points: <a href="godot:PackedVector2Array">PackedVector2Array</a>, colors: <a href="godot:PackedColorArray">PackedColorArray</a>, uvs: <a href="godot:PackedVector2Array">PackedVector2Array</a>, texture: <a href="godot:Texture2D">Texture2D</a> = null) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a custom primitive. 1 point for a point, 2 points for a line, 3 points for a triangle, and 4 points for a quad. If 0 points or more than 4 points are specified, nothing will be drawn and an error message will be printed. See also <a href='#draw_line'><code class='method'>draw_line</code></a>, <a href='#draw_polyline'><code class='method'>draw_polyline</code></a>, <a href='#draw_polygon'><code class='method'>draw_polygon</code></a>, and <a href='#draw_rect'><code class='method'>draw_rect</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_rect' name='draw_rect'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_rect(rect: <a href="godot:Rect2">Rect2</a>, color: <a href="godot:Color">Color</a>, filled: <a href="godot:bool">bool</a> = true, width: <a href="godot:float">float</a> = -1.0, antialiased: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a rectangle. If <code class='param'>filled</code> is <code>true</code>, the rectangle will be filled with the <code class='param'>color</code> specified. If <code class='param'>filled</code> is <code>false</code>, the rectangle will be drawn as a stroke with the <code class='param'>color</code> and <code class='param'>width</code> specified. See also <a href='#draw_texture_rect'><code class='method'>draw_texture_rect</code></a>.</aside>

<p>If <code class='param'>width</code> is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive <code class='param'>width</code> like <code>1.0</code>.</aside>

<p>If <code class='param'>antialiased</code> is <code>true</code>, half transparent "feathers" will be attached to the boundary, making outlines smooth.</aside>

<p><aside class='note'><p class='label'>Note:</p> <code class='param'>width</code> is only effective if <code class='param'>filled</code> is <code>false</code>.</aside>

<p><aside class='note'><p class='label'>Note:</p> Unfilled rectangles drawn with a negative <code class='param'>width</code> may not display perfectly. For example, corners may be missing or brighter due to overlapping lines (for a translucent <code class='param'>color</code>).</aside>

<p></aside>

</div>
</div>
<a id='a-draw_set_transform' name='draw_set_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_set_transform(position: <a href="godot:Vector2">Vector2</a>, rotation: <a href="godot:float">float</a> = 0.0, scale: <a href="godot:Vector2">Vector2</a> = Vector2(1, 1)) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.</aside>

<p><aside class='note'><p class='label'>Note:</p> <a href='godot:FontFile#oversampling'><code class='member'>FontFile.oversampling</code></a> does <i>not</i> take <code class='param'>scale</code> into account. This means that scaling up/down will cause bitmap fonts and rasterized (non-MSDF) dynamic fonts to appear blurry or pixelated. To ensure text remains crisp regardless of scale, you can enable MSDF font rendering by enabling <a href='godot:ProjectSettings#gui/theme/default_font_multichannel_signed_distance_field'><code class='member'>ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field</code></a> (applies to the default project font only), or enabling <b>Multichannel Signed Distance Field</b> in the import options of a DynamicFont for custom fonts. On system fonts, <a href='godot:SystemFont#multichannel_signed_distance_field'><code class='member'>SystemFont.multichannel_signed_distance_field</code></a> can be enabled in the inspector.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_set_transform_matrix' name='draw_set_transform_matrix'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_set_transform_matrix(xform: <a href="godot:Transform2D">Transform2D</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_string' name='draw_string'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_string(font: <a href="godot:Font">Font</a>, pos: <a href="godot:Vector2">Vector2</a>, text: <a href="godot:String">String</a>, alignment: <a href="godot:int">int</a> = 0, width: <a href="godot:float">float</a> = -1, font_size: <a href="godot:int">int</a> = 16, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), justification_flags: <a href="godot:int">int</a> = 3, direction: <a href="godot:int">int</a> = 0, orientation: <a href="godot:int">int</a> = 0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws <code class='param'>text</code> using the specified <code class='param'>font</code> at the <code class='param'>pos</code> (bottom-left corner using the baseline of the font). The text will have its color multiplied by <code class='param'>modulate</code>. If <code class='param'>width</code> is greater than or equal to 0, the text will be clipped if it exceeds the specified width.</aside>

<p><b>Example using the default project font:</b></aside>

<div class='code-listing'><code><pre>
# If using this method in a script that redraws constantly, move the
# `default_font` declaration to a member variable assigned in `_ready()`
# so the Control is only created once.
var default_font = ThemeDB.fallback_font
var default_font_size = ThemeDB.fallback_font_size
draw_string(default_font, Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, default_font_size)
</pre></code></div>
</div>
</div>
<a id='a-draw_string_outline' name='draw_string_outline'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_string_outline(font: <a href="godot:Font">Font</a>, pos: <a href="godot:Vector2">Vector2</a>, text: <a href="godot:String">String</a>, alignment: <a href="godot:int">int</a> = 0, width: <a href="godot:float">float</a> = -1, font_size: <a href="godot:int">int</a> = 16, size: <a href="godot:int">int</a> = 1, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), justification_flags: <a href="godot:int">int</a> = 3, direction: <a href="godot:int">int</a> = 0, orientation: <a href="godot:int">int</a> = 0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws <code class='param'>text</code> outline using the specified <code class='param'>font</code> at the <code class='param'>pos</code> (bottom-left corner using the baseline of the font). The text will have its color multiplied by <code class='param'>modulate</code>. If <code class='param'>width</code> is greater than or equal to 0, the text will be clipped if it exceeds the specified width.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_style_box' name='draw_style_box'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_style_box(style_box: <a href="godot:StyleBox">StyleBox</a>, rect: <a href="godot:Rect2">Rect2</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a styled rectangle.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_texture' name='draw_texture'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_texture(texture: <a href="godot:Texture2D">Texture2D</a>, position: <a href="godot:Vector2">Vector2</a>, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1)) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a texture at a given position.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_texture_rect' name='draw_texture_rect'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_texture_rect(texture: <a href="godot:Texture2D">Texture2D</a>, rect: <a href="godot:Rect2">Rect2</a>, tile: <a href="godot:bool">bool</a>, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), transpose: <a href="godot:bool">bool</a> = false) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a textured rectangle at a given position, optionally modulated by a color. If <code class='param'>transpose</code> is <code>true</code>, the texture will have its X and Y coordinates swapped. See also <a href='#draw_rect'><code class='method'>draw_rect</code></a> and <a href='#draw_texture_rect_region'><code class='method'>draw_texture_rect_region</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-draw_texture_rect_region' name='draw_texture_rect_region'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func draw_texture_rect_region(texture: <a href="godot:Texture2D">Texture2D</a>, rect: <a href="godot:Rect2">Rect2</a>, src_rect: <a href="godot:Rect2">Rect2</a>, modulate: <a href="godot:Color">Color</a> = Color(1, 1, 1, 1), transpose: <a href="godot:bool">bool</a> = false, clip_uv: <a href="godot:bool">bool</a> = true) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Draws a textured rectangle from a texture's region (specified by <code class='param'>src_rect</code>) at a given position, optionally modulated by a color. If <code class='param'>transpose</code> is <code>true</code>, the texture will have its X and Y coordinates swapped. See also <a href='#draw_texture_rect'><code class='method'>draw_texture_rect</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-force_update_transform' name='force_update_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func force_update_transform() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.</aside>

<p></aside>

</div>
</div>
<a id='a-get_canvas' name='get_canvas'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_canvas() -> <a href="godot:RID">RID</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the <a href="godot:RID"><code class='typeref'>RID</code></a> of the <a href="godot:World2D"><code class='typeref'>World2D</code></a> canvas where this item is in.</aside>

<p></aside>

</div>
</div>
<a id='a-get_canvas_item' name='get_canvas_item'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_canvas_item() -> <a href="godot:RID">RID</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the canvas item RID used by <a href="godot:RenderingServer"><code class='typeref'>RenderingServer</code></a> for this item.</aside>

<p></aside>

</div>
</div>
<a id='a-get_canvas_layer_node' name='get_canvas_layer_node'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_canvas_layer_node() -> <a href="godot:CanvasLayer">CanvasLayer</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the <a href="godot:CanvasLayer"><code class='typeref'>CanvasLayer</code></a> that contains this node, or <code>null</code> if the node is not in any <a href="godot:CanvasLayer"><code class='typeref'>CanvasLayer</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-get_canvas_transform' name='get_canvas_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_canvas_transform() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform from the coordinate system of the canvas, this item is in, to the <a href="godot:Viewport"><code class='typeref'>Viewport</code></a>s coordinate system.</aside>

<p></aside>

</div>
</div>
<a id='a-get_global_mouse_position' name='get_global_mouse_position'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_global_mouse_position() -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the mouse's position in the <a href="godot:CanvasLayer"><code class='typeref'>CanvasLayer</code></a> that this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> is in using the coordinate system of the <a href="godot:CanvasLayer"><code class='typeref'>CanvasLayer</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> For screen-space coordinates (e.g. when using a non-embedded <a href="godot:Popup"><code class='typeref'>Popup</code></a>), you can use <a href='godot:DisplayServer#mouse_get_position'><code class='method'>DisplayServer.mouse_get_position</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-get_global_transform' name='get_global_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_global_transform() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the global transform matrix of this item, i.e. the combined transform up to the topmost <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> node. The topmost item is a <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> that either has no parent, has non-<a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> parent or it has <a href='#top_level'><code class='member'>top_level</code></a> enabled.</aside>

<p></aside>

</div>
</div>
<a id='a-get_global_transform_with_canvas' name='get_global_transform_with_canvas'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_global_transform_with_canvas() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform from the local coordinate system of this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> to the <a href="godot:Viewport"><code class='typeref'>Viewport</code></a>s coordinate system.</aside>

<p></aside>

</div>
</div>
<a id='a-get_local_mouse_position' name='get_local_mouse_position'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_local_mouse_position() -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the mouse's position in this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> using the local coordinate system of this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-get_screen_transform' name='get_screen_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_screen_transform() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform of this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> in global screen coordinates (i.e. taking window position into account). Mostly useful for editor plugins.</aside>

<p>Equals to <a href='#get_global_transform'><code class='method'>get_global_transform</code></a> if the window is embedded (see <a href='godot:Viewport#gui_embed_subwindows'><code class='member'>Viewport.gui_embed_subwindows</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-get_transform' name='get_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_transform() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform matrix of this item.</aside>

<p></aside>

</div>
</div>
<a id='a-get_viewport_rect' name='get_viewport_rect'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_viewport_rect() -> <a href="godot:Rect2">Rect2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the viewport's boundaries as a <a href="godot:Rect2"><code class='typeref'>Rect2</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-get_viewport_transform' name='get_viewport_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_viewport_transform() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform from the coordinate system of the canvas, this item is in, to the <a href="godot:Viewport"><code class='typeref'>Viewport</code></a>s embedders coordinate system.</aside>

<p></aside>

</div>
</div>
<a id='a-get_visibility_layer_bit' name='get_visibility_layer_bit'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_visibility_layer_bit(layer: <a href="godot:int">int</a>) -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns an individual bit on the rendering visibility layer.</aside>

<p></aside>

</div>
</div>
<a id='a-get_world_2d' name='get_world_2d'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_world_2d() -> <a href="godot:World2D">World2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the <a href="godot:World2D"><code class='typeref'>World2D</code></a> where this item is in.</aside>

<p></aside>

</div>
</div>
<a id='a-hide' name='hide'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func hide() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Hide the <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> if it's currently visible. This is equivalent to setting <a href='#visible'><code class='member'>visible</code></a> to <code>false</code>.</aside>

<p></aside>

</div>
</div>
<a id='a-is_local_transform_notification_enabled' name='is_local_transform_notification_enabled'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_local_transform_notification_enabled() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if local transform notifications are communicated to children.</aside>

<p></aside>

</div>
</div>
<a id='a-is_transform_notification_enabled' name='is_transform_notification_enabled'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_transform_notification_enabled() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if global transform notifications are communicated to children.</aside>

<p></aside>

</div>
</div>
<a id='a-is_visible_in_tree' name='is_visible_in_tree'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_visible_in_tree() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the node is present in the <a href="godot:SceneTree"><code class='typeref'>SceneTree</code></a>, its <a href='#visible'><code class='member'>visible</code></a> property is <code>true</code> and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree, and is therefore not drawn (see <a href='#_draw'><code class='method'>_draw</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-make_canvas_position_local' name='make_canvas_position_local'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func make_canvas_position_local(screen_point: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Assigns <code class='param'>screen_point</code> as this node's new local transform.</aside>

<p></aside>

</div>
</div>
<a id='a-make_input_local' name='make_input_local'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func make_input_local(event: <a href="godot:InputEvent">InputEvent</a>) -> <a href="godot:InputEvent">InputEvent</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Transformations issued by <code class='param'>event</code>'s inputs are applied in local space instead of global space.</aside>

<p></aside>

</div>
</div>
<a id='a-move_to_front' name='move_to_front'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func move_to_front() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Moves this node to display on top of its siblings.</aside>

<p>Internally, the node is moved to the bottom of parent's child list. The method has no effect on nodes without a parent.</aside>

<p></aside>

</div>
</div>
<a id='a-queue_redraw' name='queue_redraw'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func queue_redraw() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Queues the <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> to redraw. During idle time, if <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> is visible, <code class='constant'><a href='#NOTIFICATION_DRAW'>NOTIFICATION_DRAW</a></code> is sent and <a href='#_draw'><code class='method'>_draw</code></a> is called. This only occurs <b>once</b> per frame, even if this method has been called multiple times.</aside>

<p></aside>

</div>
</div>
<a id='a-set_notify_local_transform' name='set_notify_local_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func set_notify_local_transform(enable: <a href="godot:bool">bool</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>If <code class='param'>enable</code> is <code>true</code>, this node will receive <code class='constant'><a href='#NOTIFICATION_LOCAL_TRANSFORM_CHANGED'>NOTIFICATION_LOCAL_TRANSFORM_CHANGED</a></code> when its local transform changes.</aside>

<p></aside>

</div>
</div>
<a id='a-set_notify_transform' name='set_notify_transform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func set_notify_transform(enable: <a href="godot:bool">bool</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>If <code class='param'>enable</code> is <code>true</code>, this node will receive <code class='constant'><a href='#NOTIFICATION_TRANSFORM_CHANGED'>NOTIFICATION_TRANSFORM_CHANGED</a></code> when its global transform changes.</aside>

<p></aside>

</div>
</div>
<a id='a-set_visibility_layer_bit' name='set_visibility_layer_bit'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func set_visibility_layer_bit(layer: <a href="godot:int">int</a>, enabled: <a href="godot:bool">bool</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Set/clear individual bits on the rendering visibility layer. This simplifies editing this <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>'s visibility layer.</aside>

<p></aside>

</div>
</div>
<a id='a-show' name='show'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func show() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Show the <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> if it's currently hidden. This is equivalent to setting <a href='#visible'><code class='member'>visible</code></a> to <code>true</code>. For controls that inherit <a href="godot:Popup"><code class='typeref'>Popup</code></a>, the correct way to make them visible is to call one of the multiple <code>popup*()</code> functions instead.</aside>

<p></aside>

</div>
</div>
<h3>Signals</h3>
<div class='signal'>
  <div class='signature'>
    <code>signal draw()</code>
  </div>
<p></aside>

<p>Emitted when the <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> must redraw, <i>after</i> the related <code class='constant'><a href='#NOTIFICATION_DRAW'>NOTIFICATION_DRAW</a></code> notification, and <i>before</i> <a href='#_draw'><code class='method'>_draw</code></a> is called.</aside>

<p><aside class='note'><p class='label'>Note:</p> Deferred connections do not allow drawing through the <code>draw_*</code> methods.</aside>

<p></aside>

</div>
<div class='signal'>
  <div class='signature'>
    <code>signal hidden()</code>
  </div>
<p></aside>

<p>Emitted when becoming hidden.</aside>

<p></aside>

</div>
<div class='signal'>
  <div class='signature'>
    <code>signal item_rect_changed()</code>
  </div>
<p></aside>

<p>Emitted when the item's <a href="godot:Rect2"><code class='typeref'>Rect2</code></a> boundaries (position or size) have changed, or when an action is taking place that may have impacted these boundaries (e.g. changing <a href='godot:Sprite2D#texture'><code class='member'>Sprite2D.texture</code></a>).</aside>

<p></aside>

</div>
<div class='signal'>
  <div class='signature'>
    <code>signal visibility_changed()</code>
  </div>
<p></aside>

<p>Emitted when the visibility (hidden/visible) changes.</aside>

<p></aside>

</div>
<h3>Constants</h3>
<ul>
<a id='a-NOTIFICATION_TRANSFORM_CHANGED' name='NOTIFICATION_TRANSFORM_CHANGED'></a>
<li><code>NOTIFICATION_TRANSFORM_CHANGED = <span class='secondary'>2000</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>'s global transform has changed. This notification is only received if enabled by <a href='#set_notify_transform'><code class='method'>set_notify_transform</code></a>.</aside>

<p></aside>

</div>
<a id='a-NOTIFICATION_LOCAL_TRANSFORM_CHANGED' name='NOTIFICATION_LOCAL_TRANSFORM_CHANGED'></a>
<li><code>NOTIFICATION_LOCAL_TRANSFORM_CHANGED = <span class='secondary'>35</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>'s local transform has changed. This notification is only received if enabled by <a href='#set_notify_local_transform'><code class='method'>set_notify_local_transform</code></a>.</aside>

<p></aside>

</div>
<a id='a-NOTIFICATION_DRAW' name='NOTIFICATION_DRAW'></a>
<li><code>NOTIFICATION_DRAW = <span class='secondary'>30</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> is requested to draw (see <a href='#_draw'><code class='method'>_draw</code></a>).</aside>

<p></aside>

</div>
<a id='a-NOTIFICATION_VISIBILITY_CHANGED' name='NOTIFICATION_VISIBILITY_CHANGED'></a>
<li><code>NOTIFICATION_VISIBILITY_CHANGED = <span class='secondary'>31</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>'s visibility has changed.</aside>

<p></aside>

</div>
<a id='a-NOTIFICATION_ENTER_CANVAS' name='NOTIFICATION_ENTER_CANVAS'></a>
<li><code>NOTIFICATION_ENTER_CANVAS = <span class='secondary'>32</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> has entered the canvas.</aside>

<p></aside>

</div>
<a id='a-NOTIFICATION_EXIT_CANVAS' name='NOTIFICATION_EXIT_CANVAS'></a>
<li><code>NOTIFICATION_EXIT_CANVAS = <span class='secondary'>33</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> has exited the canvas.</aside>

<p></aside>

</div>
<a id='a-NOTIFICATION_WORLD_2D_CHANGED' name='NOTIFICATION_WORLD_2D_CHANGED'></a>
<li><code>NOTIFICATION_WORLD_2D_CHANGED = <span class='secondary'>36</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a>'s active <a href="godot:World2D"><code class='typeref'>World2D</code></a> changed.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_PARENT_NODE' name='TEXTURE_FILTER_PARENT_NODE'></a>
<li><code>TEXTURE_FILTER_PARENT_NODE = <span class='secondary'>0</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> will inherit the filter from its parent.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_NEAREST' name='TEXTURE_FILTER_NEAREST'></a>
<li><code>TEXTURE_FILTER_NEAREST = <span class='secondary'>1</span></code>
<div class='description'>
<p></aside>

<p>The texture filter reads from the nearest pixel only. This makes the texture look pixelated from up close, and grainy from a distance (due to mipmaps not being sampled).</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_LINEAR' name='TEXTURE_FILTER_LINEAR'></a>
<li><code>TEXTURE_FILTER_LINEAR = <span class='secondary'>2</span></code>
<div class='description'>
<p></aside>

<p>The texture filter blends between the nearest 4 pixels. This makes the texture look smooth from up close, and grainy from a distance (due to mipmaps not being sampled).</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_NEAREST_WITH_MIPMAPS' name='TEXTURE_FILTER_NEAREST_WITH_MIPMAPS'></a>
<li><code>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = <span class='secondary'>3</span></code>
<div class='description'>
<p></aside>

<p>The texture filter reads from the nearest pixel and blends between the nearest 2 mipmaps (or uses the nearest mipmap if <a href='godot:ProjectSettings#rendering/textures/default_filters/use_nearest_mipmap_filter'><code class='member'>ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</code></a> is <code>true</code>). This makes the texture look pixelated from up close, and smooth from a distance.</aside>

<p>Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to <a href="godot:Camera2D"><code class='typeref'>Camera2D</code></a> zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_LINEAR_WITH_MIPMAPS' name='TEXTURE_FILTER_LINEAR_WITH_MIPMAPS'></a>
<li><code>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = <span class='secondary'>4</span></code>
<div class='description'>
<p></aside>

<p>The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps (or uses the nearest mipmap if <a href='godot:ProjectSettings#rendering/textures/default_filters/use_nearest_mipmap_filter'><code class='member'>ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</code></a> is <code>true</code>). This makes the texture look smooth from up close, and smooth from a distance.</aside>

<p>Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to <a href="godot:Camera2D"><code class='typeref'>Camera2D</code></a> zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC' name='TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC'></a>
<li><code>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC = <span class='secondary'>5</span></code>
<div class='description'>
<p></aside>

<p>The texture filter reads from the nearest pixel and blends between 2 mipmaps (or uses the nearest mipmap if <a href='godot:ProjectSettings#rendering/textures/default_filters/use_nearest_mipmap_filter'><code class='member'>ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</code></a> is <code>true</code>) based on the angle between the surface and the camera view. This makes the texture look pixelated from up close, and smooth from a distance. Anisotropic filtering improves texture quality on surfaces that are almost in line with the camera, but is slightly slower. The anisotropic filtering level can be changed by adjusting <a href='godot:ProjectSettings#rendering/textures/default_filters/anisotropic_filtering_level'><code class='member'>ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> This texture filter is rarely useful in 2D projects. <code class='constant'><a href='#TEXTURE_FILTER_NEAREST_WITH_MIPMAPS'>TEXTURE_FILTER_NEAREST_WITH_MIPMAPS</a></code> is usually more appropriate in this case.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC' name='TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC'></a>
<li><code>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC = <span class='secondary'>6</span></code>
<div class='description'>
<p></aside>

<p>The texture filter blends between the nearest 4 pixels and blends between 2 mipmaps (or uses the nearest mipmap if <a href='godot:ProjectSettings#rendering/textures/default_filters/use_nearest_mipmap_filter'><code class='member'>ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter</code></a> is <code>true</code>) based on the angle between the surface and the camera view. This makes the texture look smooth from up close, and smooth from a distance. Anisotropic filtering improves texture quality on surfaces that are almost in line with the camera, but is slightly slower. The anisotropic filtering level can be changed by adjusting <a href='godot:ProjectSettings#rendering/textures/default_filters/anisotropic_filtering_level'><code class='member'>ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level</code></a>.</aside>

<p><aside class='note'><p class='label'>Note:</p> This texture filter is rarely useful in 2D projects. <code class='constant'><a href='#TEXTURE_FILTER_LINEAR_WITH_MIPMAPS'>TEXTURE_FILTER_LINEAR_WITH_MIPMAPS</a></code> is usually more appropriate in this case.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_FILTER_MAX' name='TEXTURE_FILTER_MAX'></a>
<li><code>TEXTURE_FILTER_MAX = <span class='secondary'>7</span></code>
<div class='description'>
<p></aside>

<p>Represents the size of the <a href='godot:@GlobalScope#TextureFilter'><code class='enum'>TextureFilter</code></a> enum.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_REPEAT_PARENT_NODE' name='TEXTURE_REPEAT_PARENT_NODE'></a>
<li><code>TEXTURE_REPEAT_PARENT_NODE = <span class='secondary'>0</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:CanvasItem"><code class='typeref'>CanvasItem</code></a> will inherit the filter from its parent.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_REPEAT_DISABLED' name='TEXTURE_REPEAT_DISABLED'></a>
<li><code>TEXTURE_REPEAT_DISABLED = <span class='secondary'>1</span></code>
<div class='description'>
<p></aside>

<p>Texture will not repeat.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_REPEAT_ENABLED' name='TEXTURE_REPEAT_ENABLED'></a>
<li><code>TEXTURE_REPEAT_ENABLED = <span class='secondary'>2</span></code>
<div class='description'>
<p></aside>

<p>Texture will repeat normally.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_REPEAT_MIRROR' name='TEXTURE_REPEAT_MIRROR'></a>
<li><code>TEXTURE_REPEAT_MIRROR = <span class='secondary'>3</span></code>
<div class='description'>
<p></aside>

<p>Texture will repeat in a 2×2 tiled mode, where elements at even positions are mirrored.</aside>

<p></aside>

</div>
<a id='a-TEXTURE_REPEAT_MAX' name='TEXTURE_REPEAT_MAX'></a>
<li><code>TEXTURE_REPEAT_MAX = <span class='secondary'>4</span></code>
<div class='description'>
<p></aside>

<p>Represents the size of the <a href='godot:@GlobalScope#TextureRepeat'><code class='enum'>TextureRepeat</code></a> enum.</aside>

<p></aside>

</div>
<a id='a-CLIP_CHILDREN_DISABLED' name='CLIP_CHILDREN_DISABLED'></a>
<li><code>CLIP_CHILDREN_DISABLED = <span class='secondary'>0</span></code>
<div class='description'>
<p></aside>

<p>Child draws over parent and is not clipped.</aside>

<p></aside>

</div>
<a id='a-CLIP_CHILDREN_ONLY' name='CLIP_CHILDREN_ONLY'></a>
<li><code>CLIP_CHILDREN_ONLY = <span class='secondary'>1</span></code>
<div class='description'>
<p></aside>

<p>Parent is used for the purposes of clipping only. Child is clipped to the parent's visible area, parent is not drawn.</aside>

<p></aside>

</div>
<a id='a-CLIP_CHILDREN_AND_DRAW' name='CLIP_CHILDREN_AND_DRAW'></a>
<li><code>CLIP_CHILDREN_AND_DRAW = <span class='secondary'>2</span></code>
<div class='description'>
<p></aside>

<p>Parent is used for clipping child, but parent is also drawn underneath child as normal before clipping child to its visible area.</aside>

<p></aside>

</div>
<a id='a-CLIP_CHILDREN_MAX' name='CLIP_CHILDREN_MAX'></a>
<li><code>CLIP_CHILDREN_MAX = <span class='secondary'>3</span></code>
<div class='description'>
<p></aside>

<p>Represents the size of the <a href='godot:@GlobalScope#ClipChildrenMode'><code class='enum'>ClipChildrenMode</code></a> enum.</aside>

<p></aside>

</div>
</ul>
