<html>
<head>
    <title>Class ArrayMesh</title>
    <style>
    :root {
        color-scheme: light dark;
        --color-background: #ffffff;
        --color-text: #333333;
        --color-link: #0366d6;
        --color-code-background: #f6f8fa;
        --color-code-text: #24292e;
        --color-aside-background: #f6f8fa;
        --color-aside-border: #dfe2e5;
        --color-header-background: #f6f8fa;
        --color-signature-background: #f1f8ff;
        --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
        --font-mono: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
        --font-size-code: 14px;
    }
    
    @media (prefers-color-scheme: dark) {
        :root {
            --color-background: #0d1117;
            --color-text: #c9d1d9;
            --color-link: #58a6ff;
            --color-code-background: #161b22;
            --color-code-text: #c9d1d9;
            --color-aside-background: #161b22;
            --color-aside-border: #30363d;
            --color-header-background: #161b22;
            --color-signature-background: #1d2d3e;
        }
    }
    
    body {
        font-family: var(--font-sans);
        line-height: 1.5;
        color: var(--color-text);
        background-color: var(--color-background);
        margin: 0;
        padding: 20px;
    }
    
    h1, h2, h3 {
        margin-top: 24px;
        margin-bottom: 16px;
        font-weight: 600;
        line-height: 1.25;
    }
    
    h1 {
        font-size: 2em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h2 {
        font-size: 1.5em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h3 {
        font-size: 1.25em;
    }
    
    a {
        color: var(--color-link);
        text-decoration: none;
    }
    
    a:hover {
        text-decoration: underline;
    }
    
    code, pre {
        font-family: var(--font-mono);
        font-size: var(--font-size-code);
    }
    
    pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 16px;
        overflow: auto;
    }
    
    pre code {
        background-color: transparent;
        padding: 0;
    }
    
    .signature {
        background-color: var(--color-signature-background);
        padding: 16px;
        border-radius: 6px;
        margin-bottom: 16px;
    }
    
    .description {
        margin-bottom: 16px;
    }
    
    aside {
        background-color: var(--color-aside-background);
        border-left: 4px solid var(--color-aside-border);
        border-radius: 3px;
        padding: 16px;
        margin-bottom: 16px;
    }
    
    aside .label {
        font-weight: 600;
        margin: 0 0 8px;
    }
    
    .member {
        margin-bottom: 24px;
    }
    
    .enumvalue {
        margin-left: 16px;
    }
    
    .deprecated, .experimental {
        font-weight: 600;
        color: #d73a49;
    }
    
    ul {
        padding-left: 24px;
    }
    
    .signature code, .member code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    .signature pre, .member pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 12px;
        margin: 0;
        overflow: auto;
    }
    
    .signature pre code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    p code, li code {
        background-color: var(--color-code-background);
        border-radius: 3px;
        padding: 2px 4px;
    }
    
    .section-divider {
        border: none;
        border-top: 2px solid var(--color-divider);
        margin: 20px 0;
    }
    </style>
</head>
<body>
<h3 class='secondary'>Class</h3>
<h1>ArrayMesh</h1>
<p>
		[Mesh] type that provides utility for constructing a surface from arrays.
	</p>
<hr>
<h2>Description</h2>
<p></aside>

<p>The <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a> is used to construct a <a href="godot:Mesh"><code class='typeref'>Mesh</code></a> by specifying the attributes as arrays.</aside>

<p>The most basic example is the creation of a single triangle:</aside>

<div class='code-listing'><code><pre>
var vertices = PackedVector3Array()
vertices.push_back(Vector3(0, 1, 0))
vertices.push_back(Vector3(1, 0, 0))
vertices.push_back(Vector3(0, 0, 1))

# Initialize the ArrayMesh.
var arr_mesh = ArrayMesh.new()
var arrays = []
arrays.resize(Mesh.ARRAY_MAX)
arrays[Mesh.ARRAY_VERTEX] = vertices

# Create the Mesh.
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
var m = MeshInstance3D.new()
m.mesh = arr_mesh
</pre></code></div>
<h2>Tutorials</h2>
<ul>
    <li><a href="open-external:https://docs.godotengine.org/en/4.2/tutorials/3d/procedural_geometry/arraymesh.html">Procedural geometry using the ArrayMesh</a>
</ul>
<h2>Topics</h2>
<h3>Properties</h3>
<a id='a-blend_shape_mode' name='blend_shape_mode'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  blend_shape_mode: <a href="godot:int">int</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>Sets the blend shape mode to one of <a href='godot:@GlobalScope#Mesh.BlendShapeMode'><code class='enum'>Mesh.BlendShapeMode</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-custom_aabb' name='custom_aabb'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  custom_aabb: <a href="godot:AABB">AABB</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>Overrides the <a href="godot:AABB"><code class='typeref'>AABB</code></a> with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.</aside>

<p></aside>

</div>
</div>
<a id='a-shadow_mesh' name='shadow_mesh'></a>
<div class='member'>
  <div class='signature'>
    <code><code>var  shadow_mesh: <a href="godot:ArrayMesh">ArrayMesh</a></code> </code>
  </div>
<div class='description'>
<p></aside>

<p>An optional mesh which is used for rendering shadows and can be used for the depth prepass. Can be used to increase performance of shadow rendering by using a mesh that only contains vertex position data (without normals, UVs, colors, etc.).</aside>

<p></aside>

</div>
</div>
<h3>Methods</h3>
<a id='a-add_blend_shape' name='add_blend_shape'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func add_blend_shape(name: <a href="godot:StringName">StringName</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Adds name for a blend shape that will be added with <a href='#add_surface_from_arrays'><code class='method'>add_surface_from_arrays</code></a>. Must be called before surface is added.</aside>

<p></aside>

</div>
</div>
<a id='a-add_surface_from_arrays' name='add_surface_from_arrays'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func add_surface_from_arrays(primitive: <a href="godot:int">int</a>, arrays: <a href="godot:Array">Array</a>, blend_shapes: <a href="godot:Array[]">Array[]</a> = [], lods: <a href="godot:Dictionary">Dictionary</a> = {}, flags: <a href="godot:int">int</a> = 0) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Creates a new surface. <a href='godot:Mesh#get_surface_count'><code class='method'>Mesh.get_surface_count</code></a> will become the <code>surf_idx</code> for this new surface.</aside>

<p>Surfaces are created to be rendered using a <code class='param'>primitive</code>, which may be any of the values defined in <a href='godot:@GlobalScope#Mesh.PrimitiveType'><code class='enum'>Mesh.PrimitiveType</code></a>.</aside>

<p>The <code class='param'>arrays</code> argument is an array of arrays. Each of the <code class='constant'><a href='#Mesh.ARRAY_MAX'>Mesh.ARRAY_MAX</a></code> elements contains an array with some of the mesh data for this surface as described by the corresponding member of <a href='godot:@GlobalScope#Mesh.ArrayType'><code class='enum'>Mesh.ArrayType</code></a> or <code>null</code> if it is not used by the surface. For example, <code>arrays[0]</code> is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for <code class='constant'><a href='#Mesh.ARRAY_INDEX'>Mesh.ARRAY_INDEX</a></code> if it is used.</aside>

<p>The <code class='param'>blend_shapes</code> argument is an array of vertex data for each blend shape. Each element is an array of the same structure as <code class='param'>arrays</code>, but <code class='constant'><a href='#Mesh.ARRAY_VERTEX'>Mesh.ARRAY_VERTEX</a></code>, <code class='constant'><a href='#Mesh.ARRAY_NORMAL'>Mesh.ARRAY_NORMAL</a></code>, and <code class='constant'><a href='#Mesh.ARRAY_TANGENT'>Mesh.ARRAY_TANGENT</a></code> are set if and only if they are set in <code class='param'>arrays</code> and all other entries are <code>null</code>.</aside>

<p>The <code class='param'>lods</code> argument is a dictionary with [float] keys and <a href="godot:PackedInt32Array"><code class='typeref'>PackedInt32Array</code></a> values. Each entry in the dictionary represents an LOD level of the surface, where the value is the <code class='constant'><a href='#Mesh.ARRAY_INDEX'>Mesh.ARRAY_INDEX</a></code> array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of an LOD also increases the distance that the objects has to be from the camera before the LOD is used.</aside>

<p>The <code class='param'>flags</code> argument is the bitwise or of, as required: One value of <a href='godot:@GlobalScope#Mesh.ArrayCustomFormat'><code class='enum'>Mesh.ArrayCustomFormat</code></a> left shifted by <code>ARRAY_FORMAT_CUSTOMn_SHIFT</code> for each custom channel in use, <code class='constant'><a href='#Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE'>Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE</a></code>, <code class='constant'><a href='#Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS'>Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS</a></code>, or <code class='constant'><a href='#Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY'>Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY</a></code>.</aside>

<p><aside class='note'><p class='label'>Note:</p> When using indices, it is recommended to only use points, lines, or triangles.</aside>

<p></aside>

</div>
</div>
<a id='a-clear_blend_shapes' name='clear_blend_shapes'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func clear_blend_shapes() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes all blend shapes from this <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-clear_surfaces' name='clear_surfaces'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func clear_surfaces() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Removes all surfaces from this <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-get_blend_shape_count' name='get_blend_shape_count'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_blend_shape_count() -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the number of blend shapes that the <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a> holds.</aside>

<p></aside>

</div>
</div>
<a id='a-get_blend_shape_name' name='get_blend_shape_name'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_blend_shape_name(index: <a href="godot:int">int</a>) -> <a href="godot:StringName">StringName</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the name of the blend shape at this index.</aside>

<p></aside>

</div>
</div>
<a id='a-lightmap_unwrap' name='lightmap_unwrap'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func lightmap_unwrap(transform: <a href="godot:Transform3D">Transform3D</a>, texel_size: <a href="godot:float">float</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Performs a UV unwrap on the <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a> to prepare the mesh for lightmapping.</aside>

<p></aside>

</div>
</div>
<a id='a-regen_normal_maps' name='regen_normal_maps'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func regen_normal_maps() -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Regenerates tangents for each of the <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a>'s surfaces.</aside>

<p></aside>

</div>
</div>
<a id='a-set_blend_shape_name' name='set_blend_shape_name'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func set_blend_shape_name(index: <a href="godot:int">int</a>, name: <a href="godot:StringName">StringName</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Sets the name of the blend shape at this index.</aside>

<p></aside>

</div>
</div>
<a id='a-surface_find_by_name' name='surface_find_by_name'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_find_by_name(name: <a href="godot:String">String</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the index of the first surface with this name held within this <a href="godot:ArrayMesh"><code class='typeref'>ArrayMesh</code></a>. If none are found, -1 is returned.</aside>

<p></aside>

</div>
</div>
<a id='a-surface_get_array_index_len' name='surface_get_array_index_len'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_get_array_index_len(surf_idx: <a href="godot:int">int</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the length in indices of the index array in the requested surface (see <a href='#add_surface_from_arrays'><code class='method'>add_surface_from_arrays</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-surface_get_array_len' name='surface_get_array_len'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_get_array_len(surf_idx: <a href="godot:int">int</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the length in vertices of the vertex array in the requested surface (see <a href='#add_surface_from_arrays'><code class='method'>add_surface_from_arrays</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-surface_get_format' name='surface_get_format'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_get_format(surf_idx: <a href="godot:int">int</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the format mask of the requested surface (see <a href='#add_surface_from_arrays'><code class='method'>add_surface_from_arrays</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-surface_get_name' name='surface_get_name'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_get_name(surf_idx: <a href="godot:int">int</a>) -> <a href="godot:String">String</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Gets the name assigned to this surface.</aside>

<p></aside>

</div>
</div>
<a id='a-surface_get_primitive_type' name='surface_get_primitive_type'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_get_primitive_type(surf_idx: <a href="godot:int">int</a>) -> <a href="godot:int">int</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the primitive type of the requested surface (see <a href='#add_surface_from_arrays'><code class='method'>add_surface_from_arrays</code></a>).</aside>

<p></aside>

</div>
</div>
<a id='a-surface_set_name' name='surface_set_name'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_set_name(surf_idx: <a href="godot:int">int</a>, name: <a href="godot:String">String</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Sets a name for a given surface.</aside>

<p></aside>

</div>
</div>
<a id='a-surface_update_attribute_region' name='surface_update_attribute_region'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_update_attribute_region(surf_idx: <a href="godot:int">int</a>, offset: <a href="godot:int">int</a>, data: <a href="godot:PackedByteArray">PackedByteArray</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p></aside>

</div>
</div>
<a id='a-surface_update_skin_region' name='surface_update_skin_region'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_update_skin_region(surf_idx: <a href="godot:int">int</a>, offset: <a href="godot:int">int</a>, data: <a href="godot:PackedByteArray">PackedByteArray</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p></aside>

</div>
</div>
<a id='a-surface_update_vertex_region' name='surface_update_vertex_region'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func surface_update_vertex_region(surf_idx: <a href="godot:int">int</a>, offset: <a href="godot:int">int</a>, data: <a href="godot:PackedByteArray">PackedByteArray</a>) -> <a href="godot:void">void</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p></aside>

</div>
</div>
