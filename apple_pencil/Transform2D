<html>
<head>
    <title>Class Transform2D</title>
    <style>
    :root {
        color-scheme: light dark;
        --color-background: #ffffff;
        --color-text: #333333;
        --color-link: #0366d6;
        --color-code-background: #f6f8fa;
        --color-code-text: #24292e;
        --color-aside-background: #f6f8fa;
        --color-aside-border: #dfe2e5;
        --color-header-background: #f6f8fa;
        --color-signature-background: #f1f8ff;
        --font-sans: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;
        --font-mono: SFMono-Regular, Consolas, "Liberation Mono", Menlo, monospace;
        --font-size-code: 14px;
    }
    
    @media (prefers-color-scheme: dark) {
        :root {
            --color-background: #0d1117;
            --color-text: #c9d1d9;
            --color-link: #58a6ff;
            --color-code-background: #161b22;
            --color-code-text: #c9d1d9;
            --color-aside-background: #161b22;
            --color-aside-border: #30363d;
            --color-header-background: #161b22;
            --color-signature-background: #1d2d3e;
        }
    }
    
    body {
        font-family: var(--font-sans);
        line-height: 1.5;
        color: var(--color-text);
        background-color: var(--color-background);
        margin: 0;
        padding: 20px;
    }
    
    h1, h2, h3 {
        margin-top: 24px;
        margin-bottom: 16px;
        font-weight: 600;
        line-height: 1.25;
    }
    
    h1 {
        font-size: 2em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h2 {
        font-size: 1.5em;
        padding-bottom: 0.3em;
        border-bottom: 1px solid var(--color-aside-border);
    }
    
    h3 {
        font-size: 1.25em;
    }
    
    a {
        color: var(--color-link);
        text-decoration: none;
    }
    
    a:hover {
        text-decoration: underline;
    }
    
    code, pre {
        font-family: var(--font-mono);
        font-size: var(--font-size-code);
    }
    
    pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 16px;
        overflow: auto;
    }
    
    pre code {
        background-color: transparent;
        padding: 0;
    }
    
    .signature {
        background-color: var(--color-signature-background);
        padding: 16px;
        border-radius: 6px;
        margin-bottom: 16px;
    }
    
    .description {
        margin-bottom: 16px;
    }
    
    aside {
        background-color: var(--color-aside-background);
        border-left: 4px solid var(--color-aside-border);
        border-radius: 3px;
        padding: 16px;
        margin-bottom: 16px;
    }
    
    aside .label {
        font-weight: 600;
        margin: 0 0 8px;
    }
    
    .member {
        margin-bottom: 24px;
    }
    
    .enumvalue {
        margin-left: 16px;
    }
    
    .deprecated, .experimental {
        font-weight: 600;
        color: #d73a49;
    }
    
    ul {
        padding-left: 24px;
    }
    
    .signature code, .member code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    .signature pre, .member pre {
        background-color: var(--color-code-background);
        border-radius: 6px;
        padding: 12px;
        margin: 0;
        overflow: auto;
    }
    
    .signature pre code {
        background-color: transparent;
        padding: 0;
        white-space: pre-wrap;
        word-break: break-all;
    }
    
    p code, li code {
        background-color: var(--color-code-background);
        border-radius: 3px;
        padding: 2px 4px;
    }
    
    .section-divider {
        border: none;
        border-top: 2px solid var(--color-divider);
        margin: 20px 0;
    }
    </style>
</head>
<body>
<h3 class='secondary'>Class</h3>
<h1>Transform2D</h1>
<p>
		A 2×3 matrix representing a 2D transformation.
	</p>
<hr>
<h2>Description</h2>
<p></aside>

<p>A 2×3 matrix (2 rows, 3 columns) used for 2D linear transformations. It can represent transformations such as translation, rotation, and scaling. It consists of three <a href="godot:Vector2"><code class='typeref'>Vector2</code></a> values: <a href='#x'><code class='member'>x</code></a>, <a href='#y'><code class='member'>y</code></a>, and the <a href='#origin'><code class='member'>origin</code></a>.</aside>

<p>For a general introduction, see the <a href="https://docs.godotengine.org/en/4.2//tutorials/math/matrices_and_transforms.html">Matrices and transforms</a> tutorial.</aside>

<p></aside>

<h2>Tutorials</h2>
<ul>
    <li><a href="open-external:https://docs.godotengine.org/en/4.2/tutorials/math/index.html">Math documentation index</a>
</ul>
<h2>Topics</h2>
<h3>Properties</h3>
<h3>Methods</h3>
<a id='a-affine_inverse' name='affine_inverse'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func affine_inverse() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the inverse of the transform, under the assumption that the basis is invertible (must have non-zero determinant).</aside>

<p></aside>

</div>
</div>
<a id='a-basis_xform' name='basis_xform'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func basis_xform(v: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a vector transformed (multiplied) by the basis matrix.</aside>

<p>This method does not account for translation (the <a href='#origin'><code class='member'>origin</code></a> vector).</aside>

<p></aside>

</div>
</div>
<a id='a-basis_xform_inv' name='basis_xform_inv'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func basis_xform_inv(v: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a vector transformed (multiplied) by the inverse basis matrix, under the assumption that the basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not).</aside>

<p>This method does not account for translation (the <a href='#origin'><code class='member'>origin</code></a> vector).</aside>

<p><code>transform.basis_xform_inv(vector)</code> is equivalent to <code>transform.inverse().basis_xform(vector)</code>. See <a href='#inverse'><code class='method'>inverse</code></a>.</aside>

<p>For non-orthonormal transforms (e.g. with scaling) <code>transform.affine_inverse().basis_xform(vector)</code> can be used instead. See <a href='#affine_inverse'><code class='method'>affine_inverse</code></a>.</aside>

<p></aside>

</div>
</div>
<a id='a-determinant' name='determinant'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func determinant() -> <a href="godot:float">float</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the determinant of the basis matrix. If the basis is uniformly scaled, then its determinant equals the square of the scale factor.</aside>

<p>A negative determinant means the basis was flipped, so one part of the scale is negative. A zero determinant means the basis isn't invertible, and is usually considered invalid.</aside>

<p></aside>

</div>
</div>
<a id='a-get_origin' name='get_origin'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_origin() -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform's origin (translation).</aside>

<p></aside>

</div>
</div>
<a id='a-get_rotation' name='get_rotation'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_rotation() -> <a href="godot:float">float</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform's rotation (in radians).</aside>

<p></aside>

</div>
</div>
<a id='a-get_scale' name='get_scale'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_scale() -> <a href="godot:Vector2">Vector2</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the scale.</aside>

<p></aside>

</div>
</div>
<a id='a-get_skew' name='get_skew'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func get_skew() -> <a href="godot:float">float</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform's skew (in radians).</aside>

<p></aside>

</div>
</div>
<a id='a-interpolate_with' name='interpolate_with'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func interpolate_with(xform: <a href="godot:Transform2D">Transform2D</a>, weight: <a href="godot:float">float</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a transform interpolated between this transform and another by a given <code class='param'>weight</code> (on the range of 0.0 to 1.0).</aside>

<p></aside>

</div>
</div>
<a id='a-inverse' name='inverse'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func inverse() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the inverse of the transform, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not). Use <a href='#affine_inverse'><code class='method'>affine_inverse</code></a> for non-orthonormal transforms (e.g. with scaling).</aside>

<p></aside>

</div>
</div>
<a id='a-is_conformal' name='is_conformal'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_conformal() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the transform's basis is conformal, meaning it preserves angles and distance ratios, and may only be composed of rotation and uniform scale. Returns <code>false</code> if the transform's basis has non-uniform scale or shear/skew. This can be used to validate if the transform is non-distorted, which is important for physics and other use cases.</aside>

<p></aside>

</div>
</div>
<a id='a-is_equal_approx' name='is_equal_approx'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_equal_approx(xform: <a href="godot:Transform2D">Transform2D</a>) -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if this transform and <code class='param'>xform</code> are approximately equal, by running <a href='godot:@GlobalScope#is_equal_approx'><code class='method'>@GlobalScope.is_equal_approx</code></a> on each component.</aside>

<p></aside>

</div>
</div>
<a id='a-is_finite' name='is_finite'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func is_finite() -> <a href="godot:bool">bool</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if this transform is finite, by calling <a href='godot:@GlobalScope#is_finite'><code class='method'>@GlobalScope.is_finite</code></a> on each component.</aside>

<p></aside>

</div>
</div>
<a id='a-looking_at' name='looking_at'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func looking_at(target: <a href="godot:Vector2">Vector2</a> = Vector2(0, 0)) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform rotated such that the rotated X-axis points towards the <code class='param'>target</code> position.</aside>

<p>Operations take place in global space.</aside>

<p></aside>

</div>
</div>
<a id='a-orthonormalized' name='orthonormalized'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func orthonormalized() -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1).</aside>

<p></aside>

</div>
</div>
<a id='a-rotated' name='rotated'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func rotated(angle: <a href="godot:float">float</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform rotated by the given <code class='param'>angle</code> (in radians).</aside>

<p>This method is an optimized version of multiplying the given transform <code>X</code> with a corresponding rotation transform <code>R</code> from the left, i.e., <code>R * X</code>.</aside>

<p>This can be seen as transforming with respect to the global/parent frame.</aside>

<p></aside>

</div>
</div>
<a id='a-rotated_local' name='rotated_local'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func rotated_local(angle: <a href="godot:float">float</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform rotated by the given <code class='param'>angle</code> (in radians).</aside>

<p>This method is an optimized version of multiplying the given transform <code>X</code> with a corresponding rotation transform <code>R</code> from the right, i.e., <code>X * R</code>.</aside>

<p>This can be seen as transforming with respect to the local frame.</aside>

<p></aside>

</div>
</div>
<a id='a-scaled' name='scaled'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func scaled(scale: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform scaled by the given <code class='param'>scale</code> factor.</aside>

<p>This method is an optimized version of multiplying the given transform <code>X</code> with a corresponding scaling transform <code>S</code> from the left, i.e., <code>S * X</code>.</aside>

<p>This can be seen as transforming with respect to the global/parent frame.</aside>

<p></aside>

</div>
</div>
<a id='a-scaled_local' name='scaled_local'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func scaled_local(scale: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform scaled by the given <code class='param'>scale</code> factor.</aside>

<p>This method is an optimized version of multiplying the given transform <code>X</code> with a corresponding scaling transform <code>S</code> from the right, i.e., <code>X * S</code>.</aside>

<p>This can be seen as transforming with respect to the local frame.</aside>

<p></aside>

</div>
</div>
<a id='a-translated' name='translated'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func translated(offset: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform translated by the given <code class='param'>offset</code>.</aside>

<p>This method is an optimized version of multiplying the given transform <code>X</code> with a corresponding translation transform <code>T</code> from the left, i.e., <code>T * X</code>.</aside>

<p>This can be seen as transforming with respect to the global/parent frame.</aside>

<p></aside>

</div>
</div>
<a id='a-translated_local' name='translated_local'></a>
<div class='method'>
  <div class='signature'>
    <code><code>func translated_local(offset: <a href="godot:Vector2">Vector2</a>) -> <a href="godot:Transform2D">Transform2D</a>:</code></code>
  </div>
<div class='description'>
<p></aside>

<p>Returns a copy of the transform translated by the given <code class='param'>offset</code>.</aside>

<p>This method is an optimized version of multiplying the given transform <code>X</code> with a corresponding translation transform <code>T</code> from the right, i.e., <code>X * T</code>.</aside>

<p>This can be seen as transforming with respect to the local frame.</aside>

<p></aside>

</div>
</div>
<h3>Constants</h3>
<ul>
<a id='a-IDENTITY' name='IDENTITY'></a>
<li><code>IDENTITY = <span class='secondary'>Transform2D(1, 0, 0, 1, 0, 0)</span></code>
<div class='description'>
<p></aside>

<p>The identity <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a> with no translation, rotation or scaling applied. When applied to other data structures, <code class='constant'><a href='#IDENTITY'>IDENTITY</a></code> performs no transformation.</aside>

<p></aside>

</div>
<a id='a-FLIP_X' name='FLIP_X'></a>
<li><code>FLIP_X = <span class='secondary'>Transform2D(-1, 0, 0, 1, 0, 0)</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a> that will flip something along the X axis.</aside>

<p></aside>

</div>
<a id='a-FLIP_Y' name='FLIP_Y'></a>
<li><code>FLIP_Y = <span class='secondary'>Transform2D(1, 0, 0, -1, 0, 0)</span></code>
<div class='description'>
<p></aside>

<p>The <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a> that will flip something along the Y axis.</aside>

<p></aside>

</div>
</ul>
<h3>Operators</h3>
<a id='a-operator !=' name='operator !='></a>
<div class='signature'>
<code>
operator !=(right: <a href="godot:Transform2D">Transform2D</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the transforms are not equal.</aside>

<p><aside class='note'><p class='label'>Note:</p> Due to floating-point precision errors, consider using <a href='#is_equal_approx'><code class='method'>is_equal_approx</code></a> instead, which is more reliable.</aside>

<p></aside>

</div>
<a id='a-operator *' name='operator *'></a>
<div class='signature'>
<code>
operator *(right: <a href="godot:PackedVector2Array">PackedVector2Array</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Transforms (multiplies) each element of the <a href="godot:Vector2"><code class='typeref'>Vector2</code></a> array by the given <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a> matrix.</aside>

<p></aside>

</div>
<a id='a-operator *' name='operator *'></a>
<div class='signature'>
<code>
operator *(right: <a href="godot:Rect2">Rect2</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Transforms (multiplies) the <a href="godot:Rect2"><code class='typeref'>Rect2</code></a> by the given <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a> matrix.</aside>

<p></aside>

</div>
<a id='a-operator *' name='operator *'></a>
<div class='signature'>
<code>
operator *(right: <a href="godot:Transform2D">Transform2D</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Composes these two transformation matrices by multiplying them together. This has the effect of transforming the second transform (the child) by the first transform (the parent).</aside>

<p></aside>

</div>
<a id='a-operator *' name='operator *'></a>
<div class='signature'>
<code>
operator *(right: <a href="godot:Vector2">Vector2</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Transforms (multiplies) the <a href="godot:Vector2"><code class='typeref'>Vector2</code></a> by the given <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a> matrix.</aside>

<p></aside>

</div>
<a id='a-operator *' name='operator *'></a>
<div class='signature'>
<code>
operator *(right: <a href="godot:float">float</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>This operator multiplies all components of the <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a>, including the <a href='#origin'><code class='member'>origin</code></a> vector, which scales it uniformly.</aside>

<p></aside>

</div>
<a id='a-operator *' name='operator *'></a>
<div class='signature'>
<code>
operator *(right: <a href="godot:int">int</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>This operator multiplies all components of the <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a>, including the <a href='#origin'><code class='member'>origin</code></a> vector, which scales it uniformly.</aside>

<p></aside>

</div>
<a id='a-operator /' name='operator /'></a>
<div class='signature'>
<code>
operator /(right: <a href="godot:float">float</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>This operator divides all components of the <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a>, including the <a href='#origin'><code class='member'>origin</code></a> vector, which inversely scales it uniformly.</aside>

<p></aside>

</div>
<a id='a-operator /' name='operator /'></a>
<div class='signature'>
<code>
operator /(right: <a href="godot:int">int</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>This operator divides all components of the <a href="godot:Transform2D"><code class='typeref'>Transform2D</code></a>, including the <a href='#origin'><code class='member'>origin</code></a> vector, which inversely scales it uniformly.</aside>

<p></aside>

</div>
<a id='a-operator ==' name='operator =='></a>
<div class='signature'>
<code>
operator ==(right: <a href="godot:Transform2D">Transform2D</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Returns <code>true</code> if the transforms are exactly equal.</aside>

<p><aside class='note'><p class='label'>Note:</p> Due to floating-point precision errors, consider using <a href='#is_equal_approx'><code class='method'>is_equal_approx</code></a> instead, which is more reliable.</aside>

<p></aside>

</div>
<a id='a-operator []' name='operator []'></a>
<div class='signature'>
<code>
operator [](index: <a href="godot:int">int</a>)
</code>
</div>
<div class='description'>
<p></aside>

<p>Access transform components using their index. <code>t[0]</code> is equivalent to <code>t.x</code>, <code>t[1]</code> is equivalent to <code>t.y</code>, and <code>t[2]</code> is equivalent to <code>t.origin</code>.</aside>

<p></aside>

</div>
